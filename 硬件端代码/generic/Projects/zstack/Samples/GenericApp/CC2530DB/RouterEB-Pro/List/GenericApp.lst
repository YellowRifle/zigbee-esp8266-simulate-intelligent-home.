###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         02/May/2019  15:10:31 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµ #
#                          Àı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zs #
#                          tack\Samples\GenericApp\Source\GenericApp.c        #
#    Command line       =  -f "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×é #
#                          ÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Project #
#                          s\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wRouter.cfg" (-DCPU32MHZ              #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DRTR_NWK -DBLINK_LEDS) -f                       #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg" (-DSECURE=0                 #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\Source\GenericApp.c" -D   #
#                          ZIGBEEPRO -D ZTOOL_P1 -D MT_TASK -D MT_SYS_FUNC    #
#                          -D MT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC          #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\RouterEB-Pro\Lis #
#                          t\" -lA "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­Ò #
#                          éÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Pr #
#                          ojects\zstack\Samples\GenericApp\CC2530DB\RouterEB #
#                          -Pro\List\" --diag_suppress Pe001,Pa010 -o         #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\RouterEB-Pro\Obj #
#                          \" -e --debug --core=plain --dptr=16,1             #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×é #
#                          ÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Project #
#                          s\zstack\Samples\GenericApp\CC2530DB\" -I          #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\SOURCE\" -I   #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\ZMAIN\T #
#                          I2530DB\" -I "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.Zsta #
#                          ckĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLED #
#                          µÆ\Projects\zstack\Samples\GenericApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\" -I                     #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\" -I                         #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\TARGET\CC2530EB\" -I                 #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\" -I                      #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\INCLUDE\" -I                        #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\AF\" -I "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼ #
#                          ¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿Ú #
#                          ÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I   #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SEC\" -I                           #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SAPI\" -I                          #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SYS\" -I                           #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\ZDO\" -I                           #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\ZMAC\F8W\" -I "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼ #
#                          ¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿Ú #
#                          ÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I        #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\" -I                      #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SDATA\" -I                      #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\INCLUDE\" -I                         #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\HIGH_LEVEL\" -I                      #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\" -I                 #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz   #
#                          --require_prototypes                               #
#    List file          =  F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµ #
#                          Àı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zs #
#                          tack\Samples\GenericApp\CC2530DB\RouterEB-Pro\List #
#                          \GenericApp.lst                                    #
#    Object file        =  F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµ #
#                          Àı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zs #
#                          tack\Samples\GenericApp\CC2530DB\RouterEB-Pro\Obj\ #
#                          GenericApp.r51                                     #
#                                                                             #
#                                                                             #
###############################################################################

F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /**************************************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 15 seconds.  The application will also
     46            receive "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include <stdio.h>
     64          #include <string.h>
     65          
     66          #include "OSAL.h"
     67          #include "AF.h"
     68          #include "ZDApp.h"
     69          #include "ZDObject.h"
     70          #include "ZDProfile.h"
     71          #include "OnBoard.h"
     72          
     73          #include "GenericApp.h"
     74          #include "DebugTrace.h"
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          #include "hal_led.h"
     79          #include "hal_key.h"
     80          #include "hal_uart.h"
     81          
     82          /*********************************************************************
     83           * MACROS
     84           */
     85          #define HAL_LED_OFF   1
     86          #define HAL_LED_ON    0
     87          
     88          // This is the max byte count per OTA message.
     89          #if !defined( SERIAL_APP_TX_MAX )
     90          #define SERIAL_APP_TX_MAX  100
     91          #endif
     92          
     93          /*********************************************************************
     94           * CONSTANTS
     95           */
     96          
     97          /*********************************************************************
     98           * TYPEDEFS
     99           */
    100          
    101          /*********************************************************************
    102           * GLOBAL VARIABLES
    103           */
    104          
    105          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    106          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    107          {
    108            GENERICAPP_CLUSTERID
    109          };
    110          

   \                                 In  segment XDATA_ROM_C, align 1
    111          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    112          {
    113            GENERICAPP_ENDPOINT,              //  int Endpoint;
    114            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    115            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    116            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    117            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    118            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    119            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    120            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    121            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    122          };
    123          
    124          // This is the Endpoint/Interface description.  It is defined here, but
    125          // filled-in in GenericApp_Init().  Another way to go would be to fill
    126          // in the structure here and make it a "const" (in code space).  The
    127          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    129          
    130          /*********************************************************************
    131           * EXTERNAL VARIABLES
    132           */
    133          
    134          /*********************************************************************
    135           * EXTERNAL FUNCTIONS
    136           */
    137          
    138          /*********************************************************************
    139           * LOCAL VARIABLES
    140           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142                                    // This variable will be received when
    143                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          char RxBuf[SERIAL_APP_TX_MAX+1];
   \                     RxBuf:
   \   000000                DS 101
   \   000065                REQUIRE __INIT_XDATA_Z
    151          static uint8 SerialApp_TxLen;

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          int httpCon1 = 0;
   \                     httpCon1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          int httpsend = 0;
   \                     httpsend:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    154          
    155          /*********************************************************************
    156           * LOCAL FUNCTIONS
    157           */
    158          void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    159          void GenericApp_HandleKeys( byte shift, byte keys );
    160          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    161          void GenericApp_SendTheMessage( void );
    162          void rxCB(uint8 port,uint8 event);
    163          void Delay_ustt(uint8 Time);
    164          
    165          /*********************************************************************
    166           * NETWORK LAYER CALLBACKS
    167           */
    168          
    169          /*********************************************************************
    170           * PUBLIC FUNCTIONS
    171           */
    172          
    173          /*********************************************************************
    174           * @fn      GenericApp_Init
    175           *
    176           * @brief   Initialization function for the Generic App Task.
    177           *          This is called during initialization and should contain
    178           *          any application specific initialization (ie. hardware
    179           *          initialization/setup, table initialization, power up
    180           *          notificaiton ... ).
    181           *
    182           * @param   task_id - the ID assigned by OSAL.  This ID should be
    183           *                    used to send messages and set timers.
    184           *
    185           * @return  none
    186           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    187          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
    188          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
    189            halUARTCfg_t uartConfig;
    190            
    191            GenericApp_TaskID = task_id;
   \   000006   90....       MOV     DPTR,#GenericApp_TaskID
   \   000009   F0           MOVX    @DPTR,A
    192            GenericApp_NwkState = DEV_INIT;
   \   00000A   90....       MOV     DPTR,#GenericApp_NwkState
   \   00000D   7401         MOV     A,#0x1
   \   00000F   F0           MOVX    @DPTR,A
    193            GenericApp_TransID = 0;
   \   000010   90....       MOV     DPTR,#GenericApp_TransID
   \   000013   E4           CLR     A
   \   000014   F0           MOVX    @DPTR,A
    194          
    195            // Device hardware initialization can be added here or in main() (Zmain.c).
    196            // If the hardware is application specific - add it here.
    197            // If the hardware is other parts of the device add it in main().
    198          
    199            GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   000015   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   000018   F0           MOVX    @DPTR,A
    200            GenericApp_DstAddr.endPoint = 0;
   \   000019   A3           INC     DPTR
   \   00001A   F0           MOVX    @DPTR,A
    201            GenericApp_DstAddr.addr.shortAddr = 0;
   \   00001B   90....       MOV     DPTR,#GenericApp_DstAddr
   \   00001E   F0           MOVX    @DPTR,A
   \   00001F   A3           INC     DPTR
   \   000020   F0           MOVX    @DPTR,A
    202          
    203            // Fill out the endpoint description.
    204            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000021   90....       MOV     DPTR,#GenericApp_epDesc
   \   000024   740A         MOV     A,#0xa
   \   000026   F0           MOVX    @DPTR,A
    205            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   000027   A3           INC     DPTR
   \   000028   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00002A   F0           MOVX    @DPTR,A
   \   00002B   A3           INC     DPTR
   \   00002C   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   00002E   F0           MOVX    @DPTR,A
    206            GenericApp_epDesc.simpleDesc
    207                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   00002F   A3           INC     DPTR
   \   000030   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000032   F0           MOVX    @DPTR,A
   \   000033   A3           INC     DPTR
   \   000034   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   000036   F0           MOVX    @DPTR,A
    208            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   000037   A3           INC     DPTR
   \   000038   E4           CLR     A
   \   000039   F0           MOVX    @DPTR,A
    209          
    210            // Register the endpoint description with the AF
    211            afRegister( &GenericApp_epDesc );
   \   00003A                ; Setup parameters for call to function afRegister
   \   00003A   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   00003C   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   00003E   12....       LCALL   ??afRegister?relay
    212          
    213            // Register for all key events - This app will handle all key events
    214            RegisterForKeys( GenericApp_TaskID );
   \   000041                ; Setup parameters for call to function RegisterForKeys
   \   000041   90....       MOV     DPTR,#GenericApp_TaskID
   \   000044   E0           MOVX    A,@DPTR
   \   000045   F9           MOV     R1,A
   \   000046   12....       LCALL   ??RegisterForKeys?relay
    215            
    216            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
    217            uartConfig.baudRate             = HAL_UART_BR_115200;
    218            uartConfig.flowControl          = FALSE;
    219            uartConfig.flowControlThreshold = 64;   // 2x30 don't care - see uart driver.
    220            uartConfig.rx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
    221            uartConfig.tx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
    222            uartConfig.idleTimeout          = 6;    // 2x30 don't care - see uart driver.
    223            uartConfig.intEnable            = TRUE; // 2x30 don't care - see uart driver.
    224            uartConfig.callBackFunc         = rxCB;
    225           
    226            
    227            // Update the display
    228           #if defined(ZDO_COORDINATOR)
    229              HalUARTOpen (HAL_UART_PORT_0, &uartConfig); 
    230              HalUARTWrite(HAL_UART_PORT_0,"UartIni04 RR\r\n", sizeof("UartInitr OK\r\n"));
    231              Delay_ustt(20000000);
    232              HalUARTWrite(HAL_UART_PORT_0, "AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"));     
    233          
    234          #endif
    235              
    236            //ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
    237            //ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
    238          }
   \   000049                REQUIRE ?Subroutine0
   \   000049                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    239          
    240          /*********************************************************************
    241           * @fn      GenericApp_ProcessEvent
    242           *
    243           * @brief   Generic Application Task event processor.  This function
    244           *          is called to process all events for the task.  Events
    245           *          include timers, messages and any other user defined events.
    246           *
    247           * @param   task_id  - The OSAL assigned task ID.
    248           * @param   events - events to process.  This is a bit map and can
    249           *                   contain more than one event.
    250           *
    251           * @return  none
    252           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    253          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
    254          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    255            afIncomingMSGPacket_t *MSGpkt;
    256            afDataConfirm_t *afDataConfirm;
    257          
    258            // Data Confirmation message fields
    259            byte sentEP;
    260            ZStatus_t sentStatus;
    261            byte sentTransID;       // This should match the value sent
    262            (void)task_id;  // Intentionally unreferenced parameter
    263          
    264            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6065         JZ      ??GenericApp_ProcessEvent_0
    265            {
    266              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800D         SJMP    ??GenericApp_ProcessEvent_1
    267              while ( MSGpkt )
    268              {
    269                switch ( MSGpkt->hdr.event )
    270                {
    271                  case ZDO_CB_MSG:
    272                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    273                    break;
    274                    
    275                  case KEY_CHANGE:
    276                    GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    277                    break;
    278          
    279                  case AF_DATA_CONFIRM_CMD:
    280                    // This message is received as a confirmation of a data packet sent.
    281                    // The status is of ZStatus_t type [defined in ZComDef.h]
    282                    // The message fields are defined in AF.h
    283                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    284                    sentEP = afDataConfirm->endpoint;
    285                    sentStatus = afDataConfirm->hdr.status;
    286                    sentTransID = afDataConfirm->transID;
    287                    (void)sentEP;
    288                    (void)sentTransID;
    289          
    290                    // Action taken when confirmation is received.
    291                    if ( sentStatus != ZSuccess )
    292                    {
    293                      // The data wasn't delivered -- Do something
    294                    }
    295                    break;
    296          
    297                  case AF_INCOMING_MSG_CMD:
    298                    GenericApp_MessageMSGCB( MSGpkt );
    299                    break;
    300          
    301                  case ZDO_STATE_CHANGE:
    302                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??GenericApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#GenericApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    303                    /*if ( (GenericApp_NwkState == DEV_ZB_COORD)
    304                        || (GenericApp_NwkState == DEV_ROUTER)
    305                        || (GenericApp_NwkState == DEV_END_DEVICE) )
    306                    {
    307                      // Start sending "the" message in a regular interval.
    308                      osal_start_timerEx( GenericApp_TaskID,
    309                                          GENERICAPP_SEND_MSG_EVT,
    310                                        GENERICAPP_SEND_MSG_TIMEOUT );
    311                    }*/
    312                    break;
    313          
    314                  default:
    315                    break;
    316                }
    317          
    318                // Release the memory
    319                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    320          
    321                // Next
    322                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#GenericApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 2,R2
   \   000027   8B..         MOV     ?V0 + 3,R3
   \   000029   AE..         MOV     R6,?V0 + 2
   \   00002B   AF..         MOV     R7,?V0 + 3
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   6039         JZ      ??GenericApp_ProcessEvent_4
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   24E6         ADD     A,#-0x1a
   \   000038   6027         JZ      ??GenericApp_ProcessEvent_5
   \   00003A   245A         ADD     A,#0x5a
   \   00003C   6011         JZ      ??GenericApp_ProcessEvent_6
   \   00003E   24EF         ADD     A,#-0x11
   \   000040   60CE         JZ      ??GenericApp_ProcessEvent_2
   \   000042   24FE         ADD     A,#-0x2
   \   000044   70D0         JNZ     ??GenericApp_ProcessEvent_3
   \   000046                ; Setup parameters for call to function GenericApp_ProcessZDOMsgs
   \   000046   EE           MOV     A,R6
   \   000047   FA           MOV     R2,A
   \   000048   EF           MOV     A,R7
   \   000049   FB           MOV     R3,A
   \   00004A   12....       LCALL   ??GenericApp_ProcessZDOMsgs?relay
   \   00004D   80C7         SJMP    ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_6:
   \   00004F                ; Setup parameters for call to function GenericApp_HandleKeys
   \   00004F   A3           INC     DPTR
   \   000050   A3           INC     DPTR
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   FA           MOV     R2,A
   \   000054   8E82         MOV     DPL,R6
   \   000056   8F83         MOV     DPH,R7
   \   000058   A3           INC     DPTR
   \   000059   A3           INC     DPTR
   \   00005A   E0           MOVX    A,@DPTR
   \   00005B   F9           MOV     R1,A
   \   00005C   12....       LCALL   ??GenericApp_HandleKeys?relay
   \   00005F   80B5         SJMP    ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_5:
   \   000061                ; Setup parameters for call to function GenericApp_MessageMSGCB
   \   000061   EE           MOV     A,R6
   \   000062   FA           MOV     R2,A
   \   000063   EF           MOV     A,R7
   \   000064   FB           MOV     R3,A
   \   000065   12....       LCALL   ??GenericApp_MessageMSGCB?relay
   \   000068   80AC         SJMP    ??GenericApp_ProcessEvent_3
    323              }
    324          
    325              // return unprocessed events
    326              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   00006A   AA..         MOV     R2,?V0 + 0
   \   00006C   E5..         MOV     A,?V0 + 1
   \   00006E   6480         XRL     A,#0x80
   \   000070   FB           MOV     R3,A
   \   000071   8025         SJMP    ??GenericApp_ProcessEvent_7
    327            }
    328          
    329            // Send a message out - This event is generated by a timer
    330            //  (setup in GenericApp_Init()).
    331            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   000073   EA           MOV     A,R2
   \   000074   A2E0         MOV     C,0xE0 /* A   */.0
   \   000076   501C         JNC     ??GenericApp_ProcessEvent_8
    332            {
    333              // Send "the" message
    334              GenericApp_SendTheMessage();
   \   000078                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000078   12....       LCALL   ??GenericApp_SendTheMessage?relay
    335          
    336              // Setup to send message again
    337              osal_start_timerEx( GenericApp_TaskID,
    338                                  GENERICAPP_SEND_MSG_EVT,
    339                                GENERICAPP_SEND_MSG_TIMEOUT );
   \   00007B                ; Setup parameters for call to function osal_start_timerEx
   \   00007B   7C88         MOV     R4,#-0x78
   \   00007D   7D13         MOV     R5,#0x13
   \   00007F   7A01         MOV     R2,#0x1
   \   000081   7B00         MOV     R3,#0x0
   \   000083   90....       MOV     DPTR,#GenericApp_TaskID
   \   000086   E0           MOVX    A,@DPTR
   \   000087   F9           MOV     R1,A
   \   000088   12....       LCALL   ??osal_start_timerEx?relay
    340          
    341              // return unprocessed events
    342              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   00008B   E5..         MOV     A,?V0 + 0
   \   00008D   6401         XRL     A,#0x1
   \   00008F   FA           MOV     R2,A
   \   000090   AB..         MOV     R3,?V0 + 1
   \   000092   8004         SJMP    ??GenericApp_ProcessEvent_7
    343            }
    344          
    345            // Discard unknown events
    346            return 0;
   \                     ??GenericApp_ProcessEvent_8:
   \   000094   7A00         MOV     R2,#0x0
   \   000096   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_7:
   \   000098                REQUIRE ?Subroutine1
   \   000098                ; // Fall through to label ?Subroutine1
    347          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    348          
    349          /*********************************************************************
    350           * Event Generation Functions
    351           */
    352          
    353          /*********************************************************************
    354           * @fn      GenericApp_ProcessZDOMsgs()
    355           *
    356           * @brief   Process response messages
    357           *
    358           * @param   none
    359           *
    360           * @return  none
    361           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    362          void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     GenericApp_ProcessZDOMsgs:
    363          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    364            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 1,A
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessZDOMsgs>_0`:
   \   00001B   0000         DW        0
   \   00001D   0200         DW        2
   \   00001F   0680         DW        32774
   \   000021   ....         DW        ??GenericApp_ProcessZDOMsgs_0
   \   000023   2080         DW        32800
   \   000025   ....         DW        ??GenericApp_ProcessZDOMsgs_1
   \   000027   ....         DW        ??GenericApp_ProcessZDOMsgs_2
    365            {
    366              case End_Device_Bind_rsp:
    367                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??GenericApp_ProcessZDOMsgs_1:
   \   000029   EA           MOV     A,R2
   \   00002A   2413         ADD     A,#0x13
   \   00002C   F582         MOV     DPL,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8882         MOV     DPL,R0
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   7009         JNZ     ??GenericApp_ProcessZDOMsgs_3
    368                {
    369                  // Light LED
    370                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessZDOMsgs_4:
   \   000040   7908         MOV     R1,#0x8
   \   000042   12....       LCALL   ??HalLedSet?relay
   \   000045   8053         SJMP    ??GenericApp_ProcessZDOMsgs_2
    371                }
    372          #if defined(BLINK_LEDS)
    373                else
    374                {
    375                  // Flash LED to show failure
    376                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??GenericApp_ProcessZDOMsgs_3:
   \   000047                ; Setup parameters for call to function HalLedSet
   \   000047   7A04         MOV     R2,#0x4
   \   000049   80F5         SJMP    ??GenericApp_ProcessZDOMsgs_4
    377                }
    378          #endif
    379                break;
    380          
    381              case Match_Desc_rsp:
    382                {
    383                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??GenericApp_ProcessZDOMsgs_0:
   \   00004B                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00004B   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00004E   8A..         MOV     ?V0 + 0,R2
   \   000050   8B..         MOV     ?V0 + 1,R3
   \   000052   AE..         MOV     R6,?V0 + 0
   \   000054   AF..         MOV     R7,?V0 + 1
    384                  if ( pRsp )
   \   000056   EE           MOV     A,R6
   \   000057   4F           ORL     A,R7
   \   000058   6040         JZ      ??GenericApp_ProcessZDOMsgs_2
    385                  {
    386                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   7032         JNZ     ??GenericApp_ProcessZDOMsgs_5
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   602C         JZ      ??GenericApp_ProcessZDOMsgs_5
    387                    {
    388                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000067   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   00006A   7402         MOV     A,#0x2
   \   00006C   F0           MOVX    @DPTR,A
    389                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F8           MOV     R0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   90....       MOV     DPTR,#GenericApp_DstAddr
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \   00007E   F0           MOVX    @DPTR,A
    390                      // Take the first endpoint, Can be changed to search through endpoints
    391                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   00008B   F0           MOVX    @DPTR,A
    392          
    393                      // Light LED
    394                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00008C                ; Setup parameters for call to function HalLedSet
   \   00008C   7A01         MOV     R2,#0x1
   \   00008E   7908         MOV     R1,#0x8
   \   000090   12....       LCALL   ??HalLedSet?relay
    395                    }
    396                    osal_mem_free( pRsp );
   \                     ??GenericApp_ProcessZDOMsgs_5:
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   ??osal_mem_free?relay
    397                  }
    398                }
    399                break;
    400            }
    401          }
   \                     ??GenericApp_ProcessZDOMsgs_2:
   \   00009A                REQUIRE ?Subroutine2
   \   00009A                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    402          
    403          /*********************************************************************
    404           * @fn      GenericApp_HandleKeys
    405           *
    406           * @brief   Handles all key events for this device.
    407           *
    408           * @param   shift - true if in shift/alt.
    409           * @param   keys - bit field for key events. Valid entries:
    410           *                 HAL_KEY_SW_4
    411           *                 HAL_KEY_SW_3
    412           *                 HAL_KEY_SW_2
    413           *                 HAL_KEY_SW_1
    414           *
    415           * @return  none
    416           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    417          void GenericApp_HandleKeys( byte shift, byte keys )
   \                     GenericApp_HandleKeys:
    418          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    419            zAddrType_t dstAddr;
    420            
    421            // Shift is used to make each button/switch dual purpose.
    422            if ( shift )
   \   00000E   EE           MOV     A,R6
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??GenericApp_HandleKeys_0 & 0xFFFF
    423            {
    424              if ( keys & HAL_KEY_SW_1 )
    425              {
    426              }
    427              if ( keys & HAL_KEY_SW_2 )
    428              {
    429              }
    430              if ( keys & HAL_KEY_SW_3 )
    431              {
    432              }
    433              if ( keys & HAL_KEY_SW_4 )
    434              {
    435              }
    436            }
    437            else
    438            {
    439              if ( keys & HAL_KEY_SW_1 )
    440              {
    441              }
    442          
    443              if ( keys & HAL_KEY_SW_2 )
   \   000014   75....       MOV     ?V0 + 0,#GenericApp_ClusterList & 0xff
   \   000017   75....       MOV     ?V0 + 1,#(GenericApp_ClusterList >> 8) & 0xff
   \   00001A   EF           MOV     A,R7
   \   00001B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001D   5064         JNC     ??GenericApp_HandleKeys_1
    444              {
    445                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A00         MOV     R2,#0x0
   \   000021   7908         MOV     R1,#0x8
   \   000023   12....       LCALL   ??HalLedSet?relay
    446          
    447                // Initiate an End Device Bind Request for the mandatory endpoint
    448                dstAddr.addrMode = Addr16Bit;
   \   000026   7408         MOV     A,#0x8
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7402         MOV     A,#0x2
   \   00002D   F0           MOVX    @DPTR,A
    449                dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \   00002E   85..82       MOV     DPL,?XSP + 0
   \   000031   85..83       MOV     DPH,?XSP + 1
   \   000034   E4           CLR     A
   \   000035   F0           MOVX    @DPTR,A
   \   000036   A3           INC     DPTR
   \   000037   F0           MOVX    @DPTR,A
    450                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
    451                                      GenericApp_epDesc.endPoint,
    452                                      GENERICAPP_PROFID,
    453                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    454                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    455                                      FALSE );
   \   000038                ; Setup parameters for call to function NLME_GetShortAddr
   \   000038   12....       LCALL   ??NLME_GetShortAddr?relay
   \   00003B   8A..         MOV     ?V0 + 2,R2
   \   00003D   8B..         MOV     ?V0 + 3,R3
   \   00003F   AC..         MOV     R4,?V0 + 2
   \   000041   AD..         MOV     R5,?V0 + 3
   \   000043                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   000043   75..00       MOV     ?V0 + 2,#0x0
   \   000046   78..         MOV     R0,#?V0 + 2
   \   000048   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00004B   78..         MOV     R0,#?V0 + 0
   \   00004D   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000050   75..01       MOV     ?V0 + 2,#0x1
   \   000053   78..         MOV     R0,#?V0 + 2
   \   000055   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000058   78..         MOV     R0,#?V0 + 0
   \   00005A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00005D   78..         MOV     R0,#?V0 + 2
   \   00005F   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000062   75..04       MOV     ?V0 + 2,#0x4
   \   000065   75..0F       MOV     ?V0 + 3,#0xf
   \   000068   78..         MOV     R0,#?V0 + 2
   \   00006A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00006D   90....       MOV     DPTR,#GenericApp_epDesc
   \   000070   E0           MOVX    A,@DPTR
   \   000071   F9           MOV     R1,A
   \   000072   7409         MOV     A,#0x9
   \   000074   12....       LCALL   ?XSTACK_DISP0_8
   \   000077   AA82         MOV     R2,DPL
   \   000079   AB83         MOV     R3,DPH
   \   00007B   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00007E   7409         MOV     A,#0x9
   \   000080   12....       LCALL   ?DEALLOC_XSTACK8
    456              }
    457          
    458              if ( keys & HAL_KEY_SW_3 )
    459              {
    460              }
    461          
    462              if ( keys & HAL_KEY_SW_4 )
   \                     ??GenericApp_HandleKeys_1:
   \   000083   EF           MOV     A,R7
   \   000084   A2E3         MOV     C,0xE0 /* A   */.3
   \   000086   504D         JNC     ??GenericApp_HandleKeys_0
    463              {
    464                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000088                ; Setup parameters for call to function HalLedSet
   \   000088   7A00         MOV     R2,#0x0
   \   00008A   7908         MOV     R1,#0x8
   \   00008C   12....       LCALL   ??HalLedSet?relay
    465                // Initiate a Match Description Request (Service Discovery)
    466                dstAddr.addrMode = AddrBroadcast;
   \   00008F   7408         MOV     A,#0x8
   \   000091   12....       LCALL   ?XSTACK_DISP0_8
   \   000094   740F         MOV     A,#0xf
   \   000096   12....       LCALL   ?Subroutine3 & 0xFFFF
    467                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    468                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    469                                  GENERICAPP_PROFID,
    470                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    471                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    472                                  FALSE );
   \                     ??CrossCallReturnLabel_0:
   \   000099                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000099   75..00       MOV     ?V0 + 2,#0x0
   \   00009C   78..         MOV     R0,#?V0 + 2
   \   00009E   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000A1   78..         MOV     R0,#?V0 + 0
   \   0000A3   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A6   75..01       MOV     ?V0 + 2,#0x1
   \   0000A9   78..         MOV     R0,#?V0 + 2
   \   0000AB   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AE   78..         MOV     R0,#?V0 + 0
   \   0000B0   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000B3   75..04       MOV     ?V0 + 0,#0x4
   \   0000B6   75..0F       MOV     ?V0 + 1,#0xf
   \   0000B9   78..         MOV     R0,#?V0 + 0
   \   0000BB   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BE   7901         MOV     R1,#0x1
   \   0000C0   7CFF         MOV     R4,#-0x1
   \   0000C2   7DFF         MOV     R5,#-0x1
   \   0000C4   7408         MOV     A,#0x8
   \   0000C6   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C9   AA82         MOV     R2,DPL
   \   0000CB   AB83         MOV     R3,DPH
   \   0000CD   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0000D0   7408         MOV     A,#0x8
   \   0000D2   12....       LCALL   ?DEALLOC_XSTACK8
    473              }
    474            }
    475          }
   \                     ??GenericApp_HandleKeys_0:
   \   0000D5   7409         MOV     A,#0x9
   \   0000D7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DA   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   F0           MOVX    @DPTR,A
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   74FF         MOV     A,#-0x1
   \   000009   F0           MOVX    @DPTR,A
   \   00000A   A3           INC     DPTR
   \   00000B   F0           MOVX    @DPTR,A
   \   00000C   22           RET
    476          
    477          /*********************************************************************
    478           * LOCAL FUNCTIONS
    479           */
    480          
    481          /*********************************************************************
    482           * @fn      GenericApp_MessageMSGCB
    483           *
    484           * @brief   Data message processor callback.  This function processes
    485           *          any incoming data - probably from other devices.  So, based
    486           *          on cluster ID, perform the intended action.
    487           *
    488           * @param   none
    489           *
    490           * @return  none
    491           */
    492          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    493          void Delay_ustt(uint8 Time) //usÑÓÊ±
   \                     Delay_ustt:
    494          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    495          unsigned char i;
    496          for(i=0;i<Time;i++)
   \   000007   7E00         MOV     R6,#0x0
   \   000009   8008         SJMP    ??Delay_ustt_0
    497          {
    498          MicroWait(1);
   \                     ??Delay_ustt_1:
   \   00000B                ; Setup parameters for call to function Onboard_wait
   \   00000B   7A01         MOV     R2,#0x1
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??Onboard_wait?relay
    499          }
   \   000012   0E           INC     R6
   \                     ??Delay_ustt_0:
   \   000013   EE           MOV     A,R6
   \   000014   C3           CLR     C
   \   000015   9F           SUBB    A,R7
   \   000016   40F3         JC      ??Delay_ustt_1
    500          }
   \   000018   02....       LJMP    ?Subroutine0 & 0xFFFF
    501          
    502          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    503          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     GenericApp_MessageMSGCB:
    504          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    505            byte data ;
                        ^
Warning[Pe177]: variable "data" was declared but never referenced
    506               
    507            switch ( pkt->clusterId )
   \   000004   8A82         MOV     DPL,R2
   \   000006   8B83         MOV     DPH,R3
   \   000008   A3           INC     DPTR
   \   000009   A3           INC     DPTR
   \   00000A   A3           INC     DPTR
   \   00000B   A3           INC     DPTR
   \   00000C   E0           MOVX    A,@DPTR
   \   00000D   6401         XRL     A,#0x1
   \   00000F   7002         JNZ     ??GenericApp_MessageMSGCB_0
   \   000011   A3           INC     DPTR
   \   000012   E0           MOVX    A,@DPTR
   \                     ??GenericApp_MessageMSGCB_0:
   \   000013   700D         JNZ     ??GenericApp_MessageMSGCB_1
    508            {
    509              case GENERICAPP_CLUSTERID:
    510          #if defined(ZDO_COORDINATOR)
    511                // "the" message
    512          #else 
    513                /*
    514               data  = pkt->cmd.Data[0];    //osal_memcpy(&data, pkt->cmd.Data, 1);
    515               
    516               if(data == 0x10)
    517                 HalLedSet(HAL_LED_1, HAL_LED_ON); 
    518               else if(data == 0x11)
    519                 HalLedSet(HAL_LED_1, HAL_LED_OFF); 
    520               
    521               else if(data == 0x20)
    522                 HalLedSet(HAL_LED_2, HAL_LED_ON); 
    523               else if(data == 0x21)
    524                 HalLedSet(HAL_LED_2, HAL_LED_OFF); 
    525               
    526               else if(data == 0x30)
    527                 HalLedSet(HAL_LED_3, HAL_LED_ON); 
    528               else if(data == 0x31)
    529                 HalLedSet(HAL_LED_3, HAL_LED_OFF);   
    530                */    
    531               HalLedBlink(HAL_LED_2, 0, 50, 500);
   \   000015                ; Setup parameters for call to function HalLedBlink
   \   000015   7CF4         MOV     R4,#-0xc
   \   000017   7D01         MOV     R5,#0x1
   \   000019   7B32         MOV     R3,#0x32
   \   00001B   7A00         MOV     R2,#0x0
   \   00001D   7902         MOV     R1,#0x2
   \   00001F   12....       LCALL   ??HalLedBlink?relay
    532            
    533                
    534                 
    535                
    536          #endif      
    537                break;
    538            }
    539          }
   \                     ??GenericApp_MessageMSGCB_1:
   \   000022   D083         POP     DPH
   \   000024   D082         POP     DPL
   \   000026   02....       LJMP    ?BRET
    540          
    541          /*********************************************************************
    542           * @fn      GenericApp_SendTheMessage
    543           *
    544           * @brief   Send "the" message.
    545           *
    546           * @param   none
    547           *
    548           * @return  none
    549           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    550          void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    551          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    552            afAddrType_t P2P_DstAddr;
    553            P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    554            P2P_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?Subroutine3 & 0xFFFF
    555            P2P_DstAddr.addr.shortAddr = 0xFFFF; //ÖÕ¶Ë¶ÌµØÖ·ÔÚLCDÉÏÓĞÏÔÊ¾£¬´Ë´¦»»³ÉÖÕ¶Ë¶ÌµØÖ·¾Í¿ÉÒÔµã²¥ÁË¡£
    556            
    557            if ( AF_DataRequest( &P2P_DstAddr, &GenericApp_epDesc,
    558                                 GENERICAPP_CLUSTERID,
    559                                 10,
    560                                 NULL,
    561                                 &GenericApp_TransID,
    562                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   00001C                ; Setup parameters for call to function AF_DataRequest
   \   00001C   75..1E       MOV     ?V0 + 0,#0x1e
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000024   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   000027   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   E4           CLR     A
   \   000030   F5..         MOV     ?V0 + 0,A
   \   000032   F5..         MOV     ?V0 + 1,A
   \   000034   78..         MOV     R0,#?V0 + 0
   \   000036   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000039   75..0A       MOV     ?V0 + 0,#0xa
   \   00003C   78..         MOV     R0,#?V0 + 0
   \   00003E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000041   75..01       MOV     ?V0 + 0,#0x1
   \   000044   78..         MOV     R0,#?V0 + 0
   \   000046   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000049   7920         MOV     R1,#0x20
   \   00004B   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   00004D   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   00004F   7409         MOV     A,#0x9
   \   000051   12....       LCALL   ?XSTACK_DISP0_8
   \   000054   AA82         MOV     R2,DPL
   \   000056   AB83         MOV     R3,DPH
   \   000058   12....       LCALL   ??AF_DataRequest?relay
   \   00005B   7409         MOV     A,#0x9
   \   00005D   12....       LCALL   ?DEALLOC_XSTACK8
    563            {
    564              // Successfully requested to be sent.
    565            }
    566            else
    567            {
    568              // Error occurred in request to send.
    569            }
    570          }
   \   000060   740C         MOV     A,#0xc
   \   000062   12....       LCALL   ?DEALLOC_XSTACK8
   \   000065   02....       LJMP    ?Subroutine2 & 0xFFFF

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_ustt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_ustt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage
    571          
    572          static void rxCB(uint8 port,uint8 event)
    573          {   
    574            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    575          #if SERIAL_APP_LOOPBACK
    576                (SerialApp_TxLen < SERIAL_APP_TX_MAX))
    577          #else
    578                !SerialApp_TxLen)
    579          #endif
    580            { 
    581              uint16 len = Hal_UART_RxBufLen(HAL_UART_PORT_0);
    582              SerialApp_TxLen = HalUARTRead(HAL_UART_PORT_0, RxBuf,len);
                                                                    ^
Warning[Pe167]: argument of type "char *" is incompatible with parameter of
          type "unsigned char *"
    583                if ( strstr(RxBuf, "CWMODE=1") != NULL&&strstr(RxBuf, "OK") != NULL )
    584                    {
    585                        HalUARTWrite(HAL_UART_PORT_0,"AT+CWJAP=\"MI 6\",\"123456789q\"\r\n", strlen("AT+CWJAP=\"MI 6\",\"123456789q\"\r\n"));
    586                    }
    587                else if ( strstr(RxBuf, "IFI GOT IP") != NULL )
    588                    {
    589                        HalUARTWrite(HAL_UART_PORT_0, "AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"));
    590                       
    591                    }
    592                else if (strstr(RxBuf, "AT+CIPMUX=1") != NULL  && strstr(RxBuf, "OK") != NULL )
    593                    {
    594          
    595                        HalUARTWrite(HAL_UART_PORT_0,"AT+CIPSERVER=1,8800\r\n", strlen("AT+CIPSERVER=1,8800\r\n"));
    596                     
    597                    }
    598                else if ( strstr(RxBuf, "AT+CIPSERVER=1,8800") != NULL  && strstr(RxBuf, "OK") != NULL  )  
    599                    {
    600                     
    601                        HalUARTWrite(HAL_UART_PORT_0, "AT+CIPSTART=0,\"TCP\",\"206.253.164.235\",10086\r\n", strlen("AT+CIPSTART=0,\"TCP\",\"206.253.164.235\",10086\r\n"));
    602                    
    603                    }
    604                else if (strstr(RxBuf, "ONNECT") != NULL  && strstr(RxBuf, "OK") != NULL )
    605                    {
    606                     
    607                         HalUARTWrite(HAL_UART_PORT_0, "AT+CIPSEND=0,9\r\n", strlen("AT+CIPSEND=0,9\r\n"));
    608                    }
    609                else if (strstr(RxBuf, "CIPSEND=0,9") != NULL  && strstr(RxBuf, "OK") != NULL )
    610                     {
    611                        HalUARTWrite(HAL_UART_PORT_0, "CONN_9527\r\n", strlen("CONN_9527\r\n"));   
    612                    }
    613                else if (strstr(RxBuf, "+IPD") != NULL)
    614                    {
    615                       HalUARTWrite(HAL_UART_PORT_0, "MESSAGE SEND\r\n", strlen("MESSAGE SEND\r\n"));  
    616                       GenericApp_SendTheMessage();
    617                    }
    618                
    619              
    620                SerialApp_TxLen=0;
    621              }
    622            }
    623          
    624          
    625          
    626          /*********************************************************************
    627          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Delay_ustt                         0      0      9
       -> Onboard_wait                  0      0     18
     GenericApp_HandleKeys              0      0     42
       -> HalLedSet                     0      0     42
       -> NLME_GetShortAddr             0      0     42
       -> ZDP_EndDeviceBindReq          0      0     60
       -> HalLedSet                     0      0     42
       -> ZDP_MatchDescReq              0      0     58
     GenericApp_Init                    0      0      9
       -> afRegister                    0      0     18
       -> RegisterForKeys               0      0     18
     GenericApp_MessageMSGCB            2      0     12
       -> HalLedBlink                   4      0      0
     GenericApp_ProcessEvent            0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> GenericApp_ProcessZDOMsgs     0      0     24
       -> GenericApp_HandleKeys         0      0     24
       -> GenericApp_MessageMSGCB       0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> osal_start_timerEx            0      0     24
     GenericApp_ProcessZDOMsgs          0      0     22
       -> HalLedSet                     0      0     20
       -> HalLedSet                     0      0     20
       -> ZDO_ParseEPListRsp            0      0     20
       -> HalLedSet                     0      0     20
       -> osal_mem_free                 0      0     20
     GenericApp_SendTheMessage          0      0     43
       -> AF_DataRequest                0      0     62


   Segment part sizes:

     Function/Label                    Bytes
     --------------                    -----
     GenericApp_ClusterList               2
     GenericApp_SimpleDesc               12
     GenericApp_epDesc                    6
     GenericApp_TaskID                    1
     GenericApp_NwkState                  1
     GenericApp_TransID                   1
     GenericApp_DstAddr                  12
     RxBuf                              101
     httpCon1                             2
     httpsend                             2
     GenericApp_Init                     73
     ?Subroutine0                         5
     GenericApp_ProcessEvent            152
     ?Subroutine1                         5
     GenericApp_ProcessZDOMsgs          154
     ?Subroutine2                         5
     GenericApp_HandleKeys              221
     ?Subroutine3                        13
     Delay_ustt                          27
     GenericApp_MessageMSGCB             41
     GenericApp_SendTheMessage          104
     ??GenericApp_Init?relay              6
     ??GenericApp_ProcessEvent?relay      6
     ??GenericApp_ProcessZDOMsgs?relay    6
     ??GenericApp_HandleKeys?relay        6
     ??Delay_ustt?relay                   6
     ??GenericApp_MessageMSGCB?relay      6
     ??GenericApp_SendTheMessage?relay    6

 
 800 bytes in segment BANKED_CODE
  42 bytes in segment BANK_RELAYS
  14 bytes in segment XDATA_ROM_C
 126 bytes in segment XDATA_Z
 
 842 bytes of CODE  memory
  14 bytes of CONST memory
 126 bytes of XDATA memory

Errors: none
Warnings: 2
