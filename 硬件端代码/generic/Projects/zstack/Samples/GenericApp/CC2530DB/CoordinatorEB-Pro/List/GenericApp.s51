///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.3.10338/W32 for 8051        03/May/2019  08:11:43 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍøÊ /
//                          µÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects\ /
//                          zstack\Samples\GenericApp\Source\GenericApp.c     /
//    Command line       =  -f "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»× /
//                          éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Proje /
//                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\T /
//                          ools\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ           /
//                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TR /
//                          UE -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f   /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\Tool /
//                          s\CC2530DB\f8wConfig.cfg" (-DSECURE=0             /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DDEFAULT_CHANLIST=0x00000800                     /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7           /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40          /
//                          -DNWK_MAX_BINDING_ENTRIES=4                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4                       /
//                          "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07, 0x09,     /
//                          0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08,   /
//                          0x0A, 0x0C, 0x0D}" -DMAC_MAX_FRAME_SIZE=116       /
//                          "-DCONST=const __code" -DGENERIC=__generic        /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=1000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100)  /
//                          -DREJOIN_POLL_RATE=440 "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼ /
//                          ¶°æ)\4.ZstackÐ­ÒéÕ»×éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ /
//                          ÚÎÞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp /
//                          \Source\GenericApp.c" -D ZIGBEEPRO -D ZTOOL_P1    /
//                          -D xMT_TASK -D xMT_SYS_FUNC -D xMT_ZDO_FUNC -D    /
//                          LCD_SUPPORTED=DEBUG -lC                           /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\CoordinatorEB /
//                          -Pro\List\" -lA "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4. /
//                          ZstackÐ­ÒéÕ»×éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿Ø /
//                          ÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\CC2530 /
//                          DB\CoordinatorEB-Pro\List\" --diag_suppress       /
//                          Pe001,Pa010 -o "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.Z /
//                          stackÐ­ÒéÕ»×éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖ /
//                          ÆLEDµÆ\Projects\zstack\Samples\GenericApp\CC2530D /
//                          B\CoordinatorEB-Pro\Obj\" -e --debug              /
//                          --core=plain --dptr=16,1 --data_model=large       /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\" -I          /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\SOURCE\"   /
//                          -I "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»× /
//                          éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Proje /
//                          cts\zstack\Samples\GenericApp\CC2530DB\..\..\..\Z /
//                          MAIN\TI2530DB\" -I "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ) /
//                          \4.ZstackÐ­ÒéÕ»×éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏ /
//                          ß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\CC2 /
//                          530DB\..\..\..\..\..\COMPONENTS\MT\" -I           /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\HAL\INCLUDE\" -I                     /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\HAL\TARGET\CC2530EB\" -I             /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\MCU\CCSOC\" -I                  /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\OSAL\INCLUDE\" -I                    /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\AF\" -I                        /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\NWK\" -I                       /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SEC\" -I                       /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SAPI\" -I                      /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\SYS\" -I                       /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\STACK\ZDO\" -I                       /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\ZMAC\F8W\" -I                        /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\ZMAC\" -I "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼ /
//                          ¶°æ)\4.ZstackÐ­ÒéÕ»×éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ /
//                          ÚÎÞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp /
//                          \CC2530DB\..\..\..\..\..\COMPONENTS\SERVICES\SADD /
//                          R\" -I "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­Ò /
//                          éÕ»×éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\P /
//                          rojects\zstack\Samples\GenericApp\CC2530DB\..\..\ /
//                          ..\..\..\COMPONENTS\SERVICES\SDATA\" -I           /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\INCLUDE\" -I                     /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\HIGH_LEVEL\" -I                  /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\" -I             /
//                          "F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍø /
//                          ÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects /
//                          \zstack\Samples\GenericApp\CC2530DB\..\..\..\..\. /
//                          .\COMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\"    /
//                          -Ohz --require_prototypes                         /
//    List file          =  F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍøÊ /
//                          µÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects\ /
//                          zstack\Samples\GenericApp\CC2530DB\CoordinatorEB- /
//                          Pro\List\GenericApp.s51                           /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME GenericApp

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?ALLOC_XSTACK8
        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?DEALLOC_XSTACK8
        EXTERN ?PUSH_XSTACK_I_ONE
        EXTERN ?PUSH_XSTACK_I_TWO
        EXTERN ?US_SWITCH_SPARSE
        EXTERN ?V0
        EXTERN ?XSP
        EXTERN ?XSTACK_DISP0_8
        EXTERN __INIT_XDATA_Z

        PUBLIC ??Delay_ustt?relay
        FUNCTION ??Delay_ustt?relay,0203H
        PUBLIC ??GenericApp_HandleKeys?relay
        FUNCTION ??GenericApp_HandleKeys?relay,0203H
        PUBLIC ??GenericApp_Init?relay
        FUNCTION ??GenericApp_Init?relay,0203H
        PUBLIC ??GenericApp_MessageMSGCB?relay
        FUNCTION ??GenericApp_MessageMSGCB?relay,0203H
        PUBLIC ??GenericApp_ProcessEvent?relay
        FUNCTION ??GenericApp_ProcessEvent?relay,0203H
        PUBLIC ??GenericApp_ProcessZDOMsgs?relay
        FUNCTION ??GenericApp_ProcessZDOMsgs?relay,0203H
        PUBLIC ??GenericApp_SendTheMessage?relay
        FUNCTION ??GenericApp_SendTheMessage?relay,0203H
        FUNCTION ??rxCB?relay,0203H
        PUBLIC Delay_ustt
        FUNCTION Delay_ustt,021203H
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 9, STACK
        PUBLIC GenericApp_ClusterList
        PUBLIC GenericApp_DstAddr
        PUBLIC GenericApp_HandleKeys
        FUNCTION GenericApp_HandleKeys,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 30, STACK
        PUBLIC GenericApp_Init
        FUNCTION GenericApp_Init,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        PUBLIC GenericApp_MessageMSGCB
        FUNCTION GenericApp_MessageMSGCB,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC GenericApp_NwkState
        PUBLIC GenericApp_ProcessEvent
        FUNCTION GenericApp_ProcessEvent,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC GenericApp_ProcessZDOMsgs
        FUNCTION GenericApp_ProcessZDOMsgs,0a1203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 10, STACK
        PUBLIC GenericApp_SendTheMessage
        FUNCTION GenericApp_SendTheMessage,021203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME XSTACK, 31, STACK
        PUBLIC GenericApp_SimpleDesc
        PUBLIC GenericApp_TaskID
        PUBLIC GenericApp_TransID
        PUBLIC GenericApp_epDesc
        PUBLIC RxBuf
        PUBLIC httpCon1
        PUBLIC httpsend
        PUBLIC recData
        FUNCTION rxCB,021603H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
        
        CFI Common cfiCommon1 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-2
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B SameValue
        CFI A SameValue
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 SameValue
        CFI R1 SameValue
        CFI R2 SameValue
        CFI R3 SameValue
        CFI R4 SameValue
        CFI R5 SameValue
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT SameValue
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon1
        
afRegister          SYMBOL "afRegister"
RegisterForKeys     SYMBOL "RegisterForKeys"
HalUARTOpen         SYMBOL "HalUARTOpen"
HalUARTWrite        SYMBOL "HalUARTWrite"
osal_msg_receive    SYMBOL "osal_msg_receive"
osal_msg_deallocate SYMBOL "osal_msg_deallocate"
osal_start_timerEx  SYMBOL "osal_start_timerEx"
HalLedSet           SYMBOL "HalLedSet"
ZDO_ParseEPListRsp  SYMBOL "ZDO_ParseEPListRsp"
osal_mem_free       SYMBOL "osal_mem_free"
NLME_GetShortAddr   SYMBOL "NLME_GetShortAddr"
ZDP_EndDeviceBindReq SYMBOL "ZDP_EndDeviceBindReq"
ZDP_MatchDescReq    SYMBOL "ZDP_MatchDescReq"
Onboard_wait        SYMBOL "Onboard_wait"
AF_DataRequest      SYMBOL "AF_DataRequest"
Hal_UART_RxBufLen   SYMBOL "Hal_UART_RxBufLen"
HalUARTRead         SYMBOL "HalUARTRead"
strstr              SYMBOL "strstr"
??AF_DataRequest?relay SYMBOL "?relay", AF_DataRequest
??HalLedSet?relay   SYMBOL "?relay", HalLedSet
??HalUARTOpen?relay SYMBOL "?relay", HalUARTOpen
??HalUARTRead?relay SYMBOL "?relay", HalUARTRead
??HalUARTWrite?relay SYMBOL "?relay", HalUARTWrite
??Hal_UART_RxBufLen?relay SYMBOL "?relay", Hal_UART_RxBufLen
??NLME_GetShortAddr?relay SYMBOL "?relay", NLME_GetShortAddr
??Onboard_wait?relay SYMBOL "?relay", Onboard_wait
??RegisterForKeys?relay SYMBOL "?relay", RegisterForKeys
??ZDO_ParseEPListRsp?relay SYMBOL "?relay", ZDO_ParseEPListRsp
??ZDP_EndDeviceBindReq?relay SYMBOL "?relay", ZDP_EndDeviceBindReq
??ZDP_MatchDescReq?relay SYMBOL "?relay", ZDP_MatchDescReq
??afRegister?relay  SYMBOL "?relay", afRegister
??osal_mem_free?relay SYMBOL "?relay", osal_mem_free
??osal_msg_deallocate?relay SYMBOL "?relay", osal_msg_deallocate
??osal_msg_receive?relay SYMBOL "?relay", osal_msg_receive
??osal_start_timerEx?relay SYMBOL "?relay", osal_start_timerEx
??strstr?relay      SYMBOL "?relay", strstr
Delay_ustt          SYMBOL "Delay_ustt"
??Delay_ustt?relay  SYMBOL "?relay", Delay_ustt
GenericApp_HandleKeys SYMBOL "GenericApp_HandleKeys"
??GenericApp_HandleKeys?relay SYMBOL "?relay", GenericApp_HandleKeys
GenericApp_Init     SYMBOL "GenericApp_Init"
??GenericApp_Init?relay SYMBOL "?relay", GenericApp_Init
GenericApp_MessageMSGCB SYMBOL "GenericApp_MessageMSGCB"
??GenericApp_MessageMSGCB?relay SYMBOL "?relay", GenericApp_MessageMSGCB
GenericApp_ProcessEvent SYMBOL "GenericApp_ProcessEvent"
??GenericApp_ProcessEvent?relay SYMBOL "?relay", GenericApp_ProcessEvent
GenericApp_ProcessZDOMsgs SYMBOL "GenericApp_ProcessZDOMsgs"
??GenericApp_ProcessZDOMsgs?relay SYMBOL "?relay", GenericApp_ProcessZDOMsgs
GenericApp_SendTheMessage SYMBOL "GenericApp_SendTheMessage"
??GenericApp_SendTheMessage?relay SYMBOL "?relay", GenericApp_SendTheMessage

        EXTERN afRegister
        FUNCTION afRegister,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN RegisterForKeys
        FUNCTION RegisterForKeys,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTOpen
        FUNCTION HalUARTOpen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTWrite
        FUNCTION HalUARTWrite,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_receive
        FUNCTION osal_msg_receive,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_msg_deallocate
        FUNCTION osal_msg_deallocate,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_start_timerEx
        FUNCTION osal_start_timerEx,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalLedSet
        FUNCTION HalLedSet,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDO_ParseEPListRsp
        FUNCTION ZDO_ParseEPListRsp,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN osal_mem_free
        FUNCTION osal_mem_free,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN NLME_GetShortAddr
        FUNCTION NLME_GetShortAddr,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_EndDeviceBindReq
        FUNCTION ZDP_EndDeviceBindReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ZDP_MatchDescReq
        FUNCTION ZDP_MatchDescReq,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Onboard_wait
        FUNCTION Onboard_wait,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN AF_DataRequest
        FUNCTION AF_DataRequest,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN Hal_UART_RxBufLen
        FUNCTION Hal_UART_RxBufLen,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN HalUARTRead
        FUNCTION HalUARTRead,0202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN strstr
        FUNCTION strstr,010202H
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        EXTERN ??AF_DataRequest?relay
        FUNCTION ??AF_DataRequest?relay,00H
        EXTERN ??HalLedSet?relay
        FUNCTION ??HalLedSet?relay,00H
        EXTERN ??HalUARTOpen?relay
        FUNCTION ??HalUARTOpen?relay,00H
        EXTERN ??HalUARTRead?relay
        FUNCTION ??HalUARTRead?relay,00H
        EXTERN ??HalUARTWrite?relay
        FUNCTION ??HalUARTWrite?relay,00H
        EXTERN ??Hal_UART_RxBufLen?relay
        FUNCTION ??Hal_UART_RxBufLen?relay,00H
        EXTERN ??NLME_GetShortAddr?relay
        FUNCTION ??NLME_GetShortAddr?relay,00H
        EXTERN ??Onboard_wait?relay
        FUNCTION ??Onboard_wait?relay,00H
        EXTERN ??RegisterForKeys?relay
        FUNCTION ??RegisterForKeys?relay,00H
        EXTERN ??ZDO_ParseEPListRsp?relay
        FUNCTION ??ZDO_ParseEPListRsp?relay,00H
        EXTERN ??ZDP_EndDeviceBindReq?relay
        FUNCTION ??ZDP_EndDeviceBindReq?relay,00H
        EXTERN ??ZDP_MatchDescReq?relay
        FUNCTION ??ZDP_MatchDescReq?relay,00H
        EXTERN ??afRegister?relay
        FUNCTION ??afRegister?relay,00H
        EXTERN ??osal_mem_free?relay
        FUNCTION ??osal_mem_free?relay,00H
        EXTERN ??osal_msg_deallocate?relay
        FUNCTION ??osal_msg_deallocate?relay,00H
        EXTERN ??osal_msg_receive?relay
        FUNCTION ??osal_msg_receive?relay,00H
        EXTERN ??osal_start_timerEx?relay
        FUNCTION ??osal_start_timerEx?relay,00H
        EXTERN ??strstr?relay
        FUNCTION ??strstr?relay,00H

// F:\Zigbee×ÊÁÏ(2018È«ÐÂÉý¼¶°æ)\4.ZstackÐ­ÒéÕ»×éÍøÊµÀý\15¡¢»ùÓÚGenericApp´®¿ÚÎÞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
//    1 /**************************************************************************************************
//    2   Filename:       GenericApp.c
//    3   Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
//    4   Revision:       $Revision: 19453 $
//    5 
//    6   Description:    Generic Application (no Profile).
//    7 
//    8 
//    9   Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
//   10 
//   11   IMPORTANT: Your use of this Software is limited to those specific rights
//   12   granted under the terms of a software license agreement between the user
//   13   who downloaded the software, his/her employer (which must be your employer)
//   14   and Texas Instruments Incorporated (the "License").  You may not use this
//   15   Software unless you agree to abide by the terms of the License. The License
//   16   limits your use, and you acknowledge, that the Software may not be modified,
//   17   copied or distributed unless embedded on a Texas Instruments microcontroller
//   18   or used solely and exclusively in conjunction with a Texas Instruments radio
//   19   frequency transceiver, which is integrated into your product.  Other than for
//   20   the foregoing purpose, you may not use, reproduce, copy, prepare derivative
//   21   works of, modify, distribute, perform, display or sell this Software and/or
//   22   its documentation for any purpose.
//   23 
//   24   YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
//   25   PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
//   26   INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
//   27   NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
//   28   TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
//   29   NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
//   30   LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
//   31   INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
//   32   OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
//   33   OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
//   34   (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
//   35 
//   36   Should you have any questions regarding your right to use this Software,
//   37   contact Texas Instruments Incorporated at www.TI.com. 
//   38 **************************************************************************************************/
//   39 
//   40 /*********************************************************************
//   41   This application isn't intended to do anything useful, it is
//   42   intended to be a simple example of an application's structure.
//   43 
//   44   This application sends "Hello World" to another "Generic"
//   45   application every 15 seconds.  The application will also
//   46   receive "Hello World" packets.
//   47 
//   48   The "Hello World" messages are sent/received as MSG type message.
//   49 
//   50   This applications doesn't have a profile, so it handles everything
//   51   directly - itself.
//   52 
//   53   Key control:
//   54     SW1:
//   55     SW2:  initiates end device binding
//   56     SW3:
//   57     SW4:  initiates a match description request
//   58 *********************************************************************/
//   59 
//   60 /*********************************************************************
//   61  * INCLUDES
//   62  */
//   63 #include <stdio.h>
//   64 #include <string.h>
//   65 
//   66 #include "OSAL.h"
//   67 #include "AF.h"
//   68 #include "ZDApp.h"
//   69 #include "ZDObject.h"
//   70 #include "ZDProfile.h"
//   71 #include "OnBoard.h"
//   72 
//   73 #include "GenericApp.h"
//   74 #include "DebugTrace.h"
//   75 
//   76 /* HAL */
//   77 #include "hal_lcd.h"
//   78 #include "hal_led.h"
//   79 #include "hal_key.h"
//   80 #include "hal_uart.h"
//   81 
//   82 /*********************************************************************
//   83  * MACROS
//   84  */
//   85 #define HAL_LED_OFF   1
//   86 #define HAL_LED_ON    0
//   87 
//   88 // This is the max byte count per OTA message.
//   89 #if !defined( SERIAL_APP_TX_MAX )
//   90 #define SERIAL_APP_TX_MAX  100
//   91 #endif
//   92 
//   93 /*********************************************************************
//   94  * CONSTANTS
//   95  */
//   96 
//   97 /*********************************************************************
//   98  * TYPEDEFS
//   99  */
//  100 
//  101 /*********************************************************************
//  102  * GLOBAL VARIABLES
//  103  */
//  104 
//  105 // This list should be filled with Application specific Cluster IDs.

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA16
//  106 const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
GenericApp_ClusterList:
        DW 1
//  107 {
//  108   GENERICAPP_CLUSTERID
//  109 };
//  110 

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
//  111 const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
GenericApp_SimpleDesc:
        DB 10
        DATA16
        DW 3844
        DW 1
        DATA8
        DB 0
        DB 1
        DATA16
        DW GenericApp_ClusterList
        DATA8
        DB 1
        DATA16
        DW GenericApp_ClusterList
//  112 {
//  113   GENERICAPP_ENDPOINT,              //  int Endpoint;
//  114   GENERICAPP_PROFID,                //  uint16 AppProfId[2];
//  115   GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
//  116   GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
//  117   GENERICAPP_FLAGS,                 //  int   AppFlags:4;
//  118   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  119   (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
//  120   GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
//  121   (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
//  122 };
//  123 
//  124 // This is the Endpoint/Interface description.  It is defined here, but
//  125 // filled-in in GenericApp_Init().  Another way to go would be to fill
//  126 // in the structure here and make it a "const" (in code space).  The
//  127 // way it's defined in this sample app it is define in RAM.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  128 endPointDesc_t GenericApp_epDesc;
GenericApp_epDesc:
        DS 6
        REQUIRE __INIT_XDATA_Z
//  129 
//  130 /*********************************************************************
//  131  * EXTERNAL VARIABLES
//  132  */
//  133 
//  134 /*********************************************************************
//  135  * EXTERNAL FUNCTIONS
//  136  */
//  137 
//  138 /*********************************************************************
//  139  * LOCAL VARIABLES
//  140  */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  141 byte GenericApp_TaskID;   // Task ID for internal task/event processing
GenericApp_TaskID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  142                           // This variable will be received when
//  143                           // GenericApp_Init() is called.

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  144 devStates_t GenericApp_NwkState;
GenericApp_NwkState:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  145 
//  146 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  147 byte GenericApp_TransID;  // This is the unique message ID (counter)
GenericApp_TransID:
        DS 1
        REQUIRE __INIT_XDATA_Z
//  148 

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  149 afAddrType_t GenericApp_DstAddr;
GenericApp_DstAddr:
        DS 12
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  150 unsigned char RxBuf[SERIAL_APP_TX_MAX+1];
RxBuf:
        DS 101
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  151 byte recData[1];
recData:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//  152 static uint8 SerialApp_TxLen;
SerialApp_TxLen:
        DS 1
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  153 int httpCon1 = 0;
httpCon1:
        DS 2
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA16
//  154 int httpsend = 0;
httpsend:
        DS 2
        REQUIRE __INIT_XDATA_Z
//  155 
//  156 /*********************************************************************
//  157  * LOCAL FUNCTIONS
//  158  */
//  159 void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
//  160 void GenericApp_HandleKeys( byte shift, byte keys );
//  161 void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
//  162 void GenericApp_SendTheMessage( void );
//  163 void rxCB(uint8 port,uint8 event);
//  164 void Delay_ustt(uint8 Time);
//  165 
//  166 /*********************************************************************
//  167  * NETWORK LAYER CALLBACKS
//  168  */
//  169 
//  170 /*********************************************************************
//  171  * PUBLIC FUNCTIONS
//  172  */
//  173 
//  174 /*********************************************************************
//  175  * @fn      GenericApp_Init
//  176  *
//  177  * @brief   Initialization function for the Generic App Task.
//  178  *          This is called during initialization and should contain
//  179  *          any application specific initialization (ie. hardware
//  180  *          initialization/setup, table initialization, power up
//  181  *          notificaiton ... ).
//  182  *
//  183  * @param   task_id - the ID assigned by OSAL.  This ID should be
//  184  *                    used to send messages and set timers.
//  185  *
//  186  * @return  none
//  187  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  188 void GenericApp_Init( byte task_id )
GenericApp_Init:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function GenericApp_Init
        CODE
//  189 {
        FUNCALL GenericApp_Init, afRegister
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, RegisterForKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTOpen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, Delay_ustt
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_Init, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 38, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 38, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 29
        MOV     A,#-0x1d
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 38)
        MOV     A,R1
//  190   halUARTCfg_t uartConfig;
//  191   
//  192   GenericApp_TaskID = task_id;
        MOV     DPTR,#GenericApp_TaskID
        MOVX    @DPTR,A
//  193   GenericApp_NwkState = DEV_INIT;
        MOV     DPTR,#GenericApp_NwkState
        MOV     A,#0x1
        MOVX    @DPTR,A
//  194   GenericApp_TransID = 0;
        MOV     DPTR,#GenericApp_TransID
        CLR     A
        MOVX    @DPTR,A
//  195 
//  196   // Device hardware initialization can be added here or in main() (Zmain.c).
//  197   // If the hardware is application specific - add it here.
//  198   // If the hardware is other parts of the device add it in main().
//  199 
//  200   GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
        MOV     DPTR,#GenericApp_DstAddr + 8
        MOVX    @DPTR,A
//  201   GenericApp_DstAddr.endPoint = 0;
        INC     DPTR
        MOVX    @DPTR,A
//  202   GenericApp_DstAddr.addr.shortAddr = 0;
        MOV     DPTR,#GenericApp_DstAddr
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  203 
//  204   // Fill out the endpoint description.
//  205   GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
        MOV     DPTR,#GenericApp_epDesc
        MOV     A,#0xa
        MOVX    @DPTR,A
//  206   GenericApp_epDesc.task_id = &GenericApp_TaskID;
        INC     DPTR
        MOV     A,#GenericApp_TaskID & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_TaskID >> 8) & 0xff
        MOVX    @DPTR,A
//  207   GenericApp_epDesc.simpleDesc
//  208             = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
        INC     DPTR
        MOV     A,#GenericApp_SimpleDesc & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
        MOVX    @DPTR,A
//  209   GenericApp_epDesc.latencyReq = noLatencyReqs;
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  210 
//  211   // Register the endpoint description with the AF
//  212   afRegister( &GenericApp_epDesc );
        ; Setup parameters for call to function afRegister
        MOV     R2,#GenericApp_epDesc & 0xff
        MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
        LCALL   ??afRegister?relay
//  213 
//  214   // Register for all key events - This app will handle all key events
//  215   RegisterForKeys( GenericApp_TaskID );
        ; Setup parameters for call to function RegisterForKeys
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??RegisterForKeys?relay
//  216   
//  217   uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        MOV     A,#0x1
        MOVX    @DPTR,A
//  218   uartConfig.baudRate             = HAL_UART_BR_115200;
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x4
        MOVX    @DPTR,A
//  219   uartConfig.flowControl          = FALSE;
        MOV     A,#0x2
        LCALL   ?XSTACK_DISP0_8
        CLR     A
        MOVX    @DPTR,A
//  220   uartConfig.flowControlThreshold = 64;   // 2x30 don't care - see uart driver.
        MOV     A,#0x3
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x40
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  221   uartConfig.rx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
        MOV     A,#0xa
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  222   uartConfig.tx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
        MOV     A,#0x12
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#-0x80
        MOVX    @DPTR,A
        INC     DPTR
        CLR     A
        MOVX    @DPTR,A
//  223   uartConfig.idleTimeout          = 6;    // 2x30 don't care - see uart driver.
        MOV     A,#0x5
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x6
        MOVX    @DPTR,A
//  224   uartConfig.intEnable            = TRUE; // 2x30 don't care - see uart driver.
        MOV     A,#0x16
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x1
        MOVX    @DPTR,A
//  225   uartConfig.callBackFunc         = rxCB;
        MOV     A,#0x1b
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#??rxCB?relay & 0xff
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,#(??rxCB?relay >> 8) & 0xff
        LCALL   ?Subroutine5 & 0xFFFF
//  226  
//  227   
//  228   // Update the display
//  229  #if defined(ZDO_COORDINATOR)
//  230     HalUARTOpen (HAL_UART_PORT_0, &uartConfig); 
??CrossCallReturnLabel_2:
        MOV     R2,DPL
        MOV     R3,DPH
        MOV     R1,#0x0
        LCALL   ??HalUARTOpen?relay
//  231     HalUARTWrite(HAL_UART_PORT_0,"UartIni04 RR\r\n", sizeof("UartInitr OK\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xf
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "UartIni04 RR\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "UartIni04 RR\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  232     Delay_ustt(20000000);
        ; Setup parameters for call to function Delay_ustt
        MOV     R1,#0x0
        LCALL   ??Delay_ustt?relay
//  233     HalUARTWrite(HAL_UART_PORT_0, "AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"));     
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  234 
//  235 #endif
//  236     
//  237   //ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
//  238   //ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
//  239 }
        MOV     A,#0x1d
        LCALL   ?DEALLOC_XSTACK8
        CFI EndBlock cfiBlock0
        REQUIRE ?Subroutine0
        ; // Fall through to label ?Subroutine0

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine0:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x1
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock1
//  240 
//  241 /*********************************************************************
//  242  * @fn      GenericApp_ProcessEvent
//  243  *
//  244  * @brief   Generic Application Task event processor.  This function
//  245  *          is called to process all events for the task.  Events
//  246  *          include timers, messages and any other user defined events.
//  247  *
//  248  * @param   task_id  - The OSAL assigned task ID.
//  249  * @param   events - events to process.  This is a bit map and can
//  250  *                   contain more than one event.
//  251  *
//  252  * @return  none
//  253  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  254 UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
GenericApp_ProcessEvent:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function GenericApp_ProcessEvent
        CODE
//  255 {
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_deallocate
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_msg_receive
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_ProcessZDOMsgs
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_HandleKeys
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessEvent, osal_start_timerEx
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
//  256   afIncomingMSGPacket_t *MSGpkt;
//  257   afDataConfirm_t *afDataConfirm;
//  258 
//  259   // Data Confirmation message fields
//  260   byte sentEP;
//  261   ZStatus_t sentStatus;
//  262   byte sentTransID;       // This should match the value sent
//  263   (void)task_id;  // Intentionally unreferenced parameter
//  264 
//  265   if ( events & SYS_EVENT_MSG )
        MOV     A,R3
        ANL     A,#0x80
        JZ      ??GenericApp_ProcessEvent_0
//  266   {
//  267     MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
        SJMP    ??GenericApp_ProcessEvent_1
//  268     while ( MSGpkt )
//  269     {
//  270       switch ( MSGpkt->hdr.event )
//  271       {
//  272         case ZDO_CB_MSG:
//  273           GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
//  274           break;
//  275           
//  276         case KEY_CHANGE:
//  277           GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
//  278           break;
//  279 
//  280         case AF_DATA_CONFIRM_CMD:
//  281           // This message is received as a confirmation of a data packet sent.
//  282           // The status is of ZStatus_t type [defined in ZComDef.h]
//  283           // The message fields are defined in AF.h
//  284           afDataConfirm = (afDataConfirm_t *)MSGpkt;
//  285           sentEP = afDataConfirm->endpoint;
//  286           sentStatus = afDataConfirm->hdr.status;
//  287           sentTransID = afDataConfirm->transID;
//  288           (void)sentEP;
//  289           (void)sentTransID;
//  290 
//  291           // Action taken when confirmation is received.
//  292           if ( sentStatus != ZSuccess )
//  293           {
//  294             // The data wasn't delivered -- Do something
//  295           }
//  296           break;
//  297 
//  298         case AF_INCOMING_MSG_CMD:
//  299           GenericApp_MessageMSGCB( MSGpkt );
//  300           break;
//  301 
//  302         case ZDO_STATE_CHANGE:
//  303           GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
??GenericApp_ProcessEvent_2:
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_NwkState
        MOVX    @DPTR,A
//  304           /*if ( (GenericApp_NwkState == DEV_ZB_COORD)
//  305               || (GenericApp_NwkState == DEV_ROUTER)
//  306               || (GenericApp_NwkState == DEV_END_DEVICE) )
//  307           {
//  308             // Start sending "the" message in a regular interval.
//  309             osal_start_timerEx( GenericApp_TaskID,
//  310                                 GENERICAPP_SEND_MSG_EVT,
//  311                               GENERICAPP_SEND_MSG_TIMEOUT );
//  312           }*/
//  313           break;
//  314 
//  315         default:
//  316           break;
//  317       }
//  318 
//  319       // Release the memory
//  320       osal_msg_deallocate( (uint8 *)MSGpkt );
??GenericApp_ProcessEvent_3:
        ; Setup parameters for call to function osal_msg_deallocate
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_msg_deallocate?relay
//  321 
//  322       // Next
//  323       MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
        ; Setup parameters for call to function osal_msg_receive
??GenericApp_ProcessEvent_1:
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_msg_receive?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R6,?V0 + 2
        MOV     R7,?V0 + 3
        MOV     A,R6
        ORL     A,R7
        JZ      ??GenericApp_ProcessEvent_4
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        ADD     A,#0x40
        JZ      ??GenericApp_ProcessEvent_5
        ADD     A,#-0x11
        JZ      ??GenericApp_ProcessEvent_2
        ADD     A,#-0x2
        JNZ     ??GenericApp_ProcessEvent_3
        ; Setup parameters for call to function GenericApp_ProcessZDOMsgs
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??GenericApp_ProcessZDOMsgs?relay
        SJMP    ??GenericApp_ProcessEvent_3
??GenericApp_ProcessEvent_5:
        ; Setup parameters for call to function GenericApp_HandleKeys
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R2,A
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??GenericApp_HandleKeys?relay
        SJMP    ??GenericApp_ProcessEvent_3
//  324     }
//  325 
//  326     // return unprocessed events
//  327     return (events ^ SYS_EVENT_MSG);
??GenericApp_ProcessEvent_4:
        MOV     R2,?V0 + 0
        MOV     A,?V0 + 1
        XRL     A,#0x80
        MOV     R3,A
        SJMP    ??GenericApp_ProcessEvent_6
//  328   }
//  329 
//  330   // Send a message out - This event is generated by a timer
//  331   //  (setup in GenericApp_Init()).
//  332   if ( events & GENERICAPP_SEND_MSG_EVT )
??GenericApp_ProcessEvent_0:
        MOV     A,R2
        MOV     C,0xE0 /* A   */.0
        JNC     ??GenericApp_ProcessEvent_7
//  333   {
//  334     // Send "the" message
//  335     GenericApp_SendTheMessage();
        ; Setup parameters for call to function GenericApp_SendTheMessage
        LCALL   ??GenericApp_SendTheMessage?relay
//  336 
//  337     // Setup to send message again
//  338     osal_start_timerEx( GenericApp_TaskID,
//  339                         GENERICAPP_SEND_MSG_EVT,
//  340                       GENERICAPP_SEND_MSG_TIMEOUT );
        ; Setup parameters for call to function osal_start_timerEx
        MOV     R4,#-0x78
        MOV     R5,#0x13
        MOV     R2,#0x1
        MOV     R3,#0x0
        MOV     DPTR,#GenericApp_TaskID
        MOVX    A,@DPTR
        MOV     R1,A
        LCALL   ??osal_start_timerEx?relay
//  341 
//  342     // return unprocessed events
//  343     return (events ^ GENERICAPP_SEND_MSG_EVT);
        MOV     A,?V0 + 0
        XRL     A,#0x1
        MOV     R2,A
        MOV     R3,?V0 + 1
        SJMP    ??GenericApp_ProcessEvent_6
//  344   }
//  345 
//  346   // Discard unknown events
//  347   return 0;
??GenericApp_ProcessEvent_7:
        MOV     R2,#0x0
        MOV     R3,#0x0
        CFI EndBlock cfiBlock2
??GenericApp_ProcessEvent_6:
        REQUIRE ?Subroutine1
        ; // Fall through to label ?Subroutine1
//  348 }

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine1:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock3
//  349 
//  350 /*********************************************************************
//  351  * Event Generation Functions
//  352  */
//  353 
//  354 /*********************************************************************
//  355  * @fn      GenericApp_ProcessZDOMsgs()
//  356  *
//  357  * @brief   Process response messages
//  358  *
//  359  * @param   none
//  360  *
//  361  * @return  none
//  362  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  363 void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
GenericApp_ProcessZDOMsgs:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function GenericApp_ProcessZDOMsgs
        CODE
//  364 {
        FUNCALL GenericApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessZDOMsgs, ZDO_ParseEPListRsp
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessZDOMsgs, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_ProcessZDOMsgs, osal_mem_free
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 10, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//  365   switch ( inMsg->clusterID )
        MOV     A,R2
        ADD     A,#0xc
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     ?V0 + 0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     ?V0 + 1,A
        MOV     R0,#?V0 + 0
        LCALL   ?US_SWITCH_SPARSE
`?<Jumptable for GenericApp_ProcessZDOMsgs>_0`:
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        2
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32774
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessZDOMsgs_0
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        32800
        DATA
        DATA16
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessZDOMsgs_1
        DATA
        DATA16
        DATA
        DATA16
        DW        ??GenericApp_ProcessZDOMsgs_2
        CODE
//  366   {
//  367     case End_Device_Bind_rsp:
//  368       if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
??GenericApp_ProcessZDOMsgs_1:
        MOV     A,R2
        ADD     A,#0x13
        MOV     DPL,A
        MOV     A,R3
        ADDC    A,#0x0
        MOV     DPH,A
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPH,A
        MOV     DPL,R0
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessZDOMsgs_3
//  369       {
//  370         // Light LED
//  371         HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
??GenericApp_ProcessZDOMsgs_4:
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
        SJMP    ??GenericApp_ProcessZDOMsgs_2
//  372       }
//  373 #if defined(BLINK_LEDS)
//  374       else
//  375       {
//  376         // Flash LED to show failure
//  377         HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
??GenericApp_ProcessZDOMsgs_3:
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x4
        SJMP    ??GenericApp_ProcessZDOMsgs_4
//  378       }
//  379 #endif
//  380       break;
//  381 
//  382     case Match_Desc_rsp:
//  383       {
//  384         ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
??GenericApp_ProcessZDOMsgs_0:
        ; Setup parameters for call to function ZDO_ParseEPListRsp
        LCALL   ??ZDO_ParseEPListRsp?relay
        MOV     ?V0 + 0,R2
        MOV     ?V0 + 1,R3
        MOV     R6,?V0 + 0
        MOV     R7,?V0 + 1
//  385         if ( pRsp )
        MOV     A,R6
        ORL     A,R7
        JZ      ??GenericApp_ProcessZDOMsgs_2
//  386         {
//  387           if ( pRsp->status == ZSuccess && pRsp->cnt )
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JNZ     ??GenericApp_ProcessZDOMsgs_5
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JZ      ??GenericApp_ProcessZDOMsgs_5
//  388           {
//  389             GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     DPTR,#GenericApp_DstAddr + 8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  390             GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     DPTR,#GenericApp_DstAddr
        MOV     A,R0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,R1
        MOVX    @DPTR,A
//  391             // Take the first endpoint, Can be changed to search through endpoints
//  392             GenericApp_DstAddr.endPoint = pRsp->epList[0];
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     DPTR,#GenericApp_DstAddr + 9
        MOVX    @DPTR,A
//  393 
//  394             // Light LED
//  395             HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x1
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  396           }
//  397           osal_mem_free( pRsp );
??GenericApp_ProcessZDOMsgs_5:
        ; Setup parameters for call to function osal_mem_free
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??osal_mem_free?relay
        CFI EndBlock cfiBlock4
//  398         }
//  399       }
//  400       break;
//  401   }
//  402 }
??GenericApp_ProcessZDOMsgs_2:
        REQUIRE ?Subroutine2
        ; // Fall through to label ?Subroutine2

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine2:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI NoFunction
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
//  403 
//  404 /*********************************************************************
//  405  * @fn      GenericApp_HandleKeys
//  406  *
//  407  * @brief   Handles all key events for this device.
//  408  *
//  409  * @param   shift - true if in shift/alt.
//  410  * @param   keys - bit field for key events. Valid entries:
//  411  *                 HAL_KEY_SW_4
//  412  *                 HAL_KEY_SW_3
//  413  *                 HAL_KEY_SW_2
//  414  *                 HAL_KEY_SW_1
//  415  *
//  416  * @return  none
//  417  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  418 void GenericApp_HandleKeys( byte shift, byte keys )
GenericApp_HandleKeys:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function GenericApp_HandleKeys
        CODE
//  419 {
        FUNCALL GenericApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_HandleKeys, NLME_GetShortAddr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_HandleKeys, ZDP_EndDeviceBindReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 30, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 30, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_HandleKeys, HalLedSet
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 21, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 21, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL GenericApp_HandleKeys, ZDP_MatchDescReq
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 29, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 29, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 9
        MOV     A,#-0x9
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
        MOV     A,R1
        MOV     R6,A
        MOV     A,R2
        MOV     R7,A
//  420   zAddrType_t dstAddr;
//  421   
//  422   // Shift is used to make each button/switch dual purpose.
//  423   if ( shift )
        MOV     A,R6
        JZ      $+5
        LJMP    ??GenericApp_HandleKeys_0 & 0xFFFF
//  424   {
//  425     if ( keys & HAL_KEY_SW_1 )
//  426     {
//  427     }
//  428     if ( keys & HAL_KEY_SW_2 )
//  429     {
//  430     }
//  431     if ( keys & HAL_KEY_SW_3 )
//  432     {
//  433     }
//  434     if ( keys & HAL_KEY_SW_4 )
//  435     {
//  436     }
//  437   }
//  438   else
//  439   {
//  440     if ( keys & HAL_KEY_SW_1 )
//  441     {
//  442     }
//  443 
//  444     if ( keys & HAL_KEY_SW_2 )
        MOV     ?V0 + 0,#GenericApp_ClusterList & 0xff
        MOV     ?V0 + 1,#(GenericApp_ClusterList >> 8) & 0xff
        MOV     A,R7
        MOV     C,0xE0 /* A   */.1
        JNC     ??GenericApp_HandleKeys_1
//  445     {
//  446       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  447 
//  448       // Initiate an End Device Bind Request for the mandatory endpoint
//  449       dstAddr.addrMode = Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        LCALL   ?Subroutine5 & 0xFFFF
//  450       dstAddr.addr.shortAddr = 0x0000; // Coordinator
??CrossCallReturnLabel_3:
        CLR     A
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
//  451       ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
//  452                             GenericApp_epDesc.endPoint,
//  453                             GENERICAPP_PROFID,
//  454                             GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  455                             GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  456                             FALSE );
        ; Setup parameters for call to function NLME_GetShortAddr
        LCALL   ??NLME_GetShortAddr?relay
        MOV     ?V0 + 2,R2
        MOV     ?V0 + 3,R3
        MOV     R4,?V0 + 2
        MOV     R5,?V0 + 3
        ; Setup parameters for call to function ZDP_EndDeviceBindReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 28)
        MOV     ?V0 + 2,#0x4
        MOV     ?V0 + 3,#0xf
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 30)
        MOV     DPTR,#GenericApp_epDesc
        MOVX    A,@DPTR
        MOV     R1,A
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_EndDeviceBindReq?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  457     }
//  458 
//  459     if ( keys & HAL_KEY_SW_3 )
//  460     {
//  461     }
//  462 
//  463     if ( keys & HAL_KEY_SW_4 )
??GenericApp_HandleKeys_1:
        MOV     A,R7
        MOV     C,0xE0 /* A   */.3
        JNC     ??GenericApp_HandleKeys_0
//  464     {
//  465       HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
        ; Setup parameters for call to function HalLedSet
        MOV     R2,#0x0
        MOV     R1,#0x8
        LCALL   ??HalLedSet?relay
//  466       // Initiate a Match Description Request (Service Discovery)
//  467       dstAddr.addrMode = AddrBroadcast;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xf
        LCALL   ?Subroutine4 & 0xFFFF
//  468       dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
//  469       ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
//  470                         GENERICAPP_PROFID,
//  471                         GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  472                         GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
//  473                         FALSE );
??CrossCallReturnLabel_0:
        ; Setup parameters for call to function ZDP_MatchDescReq
        MOV     ?V0 + 2,#0x0
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 22)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 24)
        MOV     ?V0 + 2,#0x1
        MOV     R0,#?V0 + 2
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x4
        MOV     ?V0 + 1,#0xf
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R1,#0x1
        MOV     R4,#-0x1
        MOV     R5,#-0x1
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??ZDP_MatchDescReq?relay
        MOV     A,#0x8
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 21)
//  474     }
//  475   }
//  476 }
??GenericApp_HandleKeys_0:
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 12)
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock6

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine5:
        CFI Block cfiCond7 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_2
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 38)
        CFI Block cfiCond8 Using cfiCommon0
        CFI (cfiCond8) NoFunction
        CFI (cfiCond8) Conditional ??CrossCallReturnLabel_3
        CFI (cfiCond8) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond8) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond8) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond8) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond8) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond8) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond8) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond8) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond8) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond8) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond8) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond8) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond8) CFA_SP SP+0
        CFI (cfiCond8) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond9 Using cfiCommon0
        CFI (cfiCond9) NoFunction
        CFI (cfiCond9) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_0
        CFI (cfiCond9) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond9) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond9) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond9) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond9) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond9) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond9) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond9) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond9) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond9) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond9) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond9) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond9) CFA_SP SP+0
        CFI (cfiCond9) CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond10 Using cfiCommon0
        CFI (cfiCond10) NoFunction
        CFI (cfiCond10) Conditional ??CrossCallReturnLabel_4, ??CrossCallReturnLabel_1
        CFI (cfiCond10) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond10) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond10) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond10) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond10) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond10) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond10) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond10) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond10) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond10) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond10) CFA_SP SP+0
        CFI (cfiCond10) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker11 Using cfiCommon1
        CFI (cfiPicker11) NoFunction
        CFI (cfiPicker11) Picker
        MOVX    @DPTR,A
        ; Setup parameters for call to function HalUARTOpen
        MOV     DPL,?XSP + 0
        MOV     DPH,?XSP + 1
        RET
        CFI EndBlock cfiCond7
        CFI EndBlock cfiCond8
        CFI EndBlock cfiCond9
        CFI EndBlock cfiCond10
        CFI EndBlock cfiPicker11
//  477 
//  478 /*********************************************************************
//  479  * LOCAL FUNCTIONS
//  480  */
//  481 
//  482 /*********************************************************************
//  483  * @fn      GenericApp_MessageMSGCB
//  484  *
//  485  * @brief   Data message processor callback.  This function processes
//  486  *          any incoming data - probably from other devices.  So, based
//  487  *          on cluster ID, perform the intended action.
//  488  *
//  489  * @param   none
//  490  *
//  491  * @return  none
//  492  */
//  493 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  494 void Delay_ustt(uint8 Time) //usÑÓÊ±
Delay_ustt:
        CFI Block cfiBlock12 Using cfiCommon0
        CFI Function Delay_ustt
        CODE
//  495 {
        FUNCALL Delay_ustt, Onboard_wait
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 9, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 9, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0x9
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 9)
        ; Saved register size: 9
        ; Auto size: 0
        MOV     A,R1
        MOV     R7,A
//  496 unsigned char i;
//  497 for(i=0;i<Time;i++)
        MOV     R6,#0x0
        SJMP    ??Delay_ustt_0
//  498 {
//  499 MicroWait(1);
??Delay_ustt_1:
        ; Setup parameters for call to function Onboard_wait
        MOV     R2,#0x1
        MOV     R3,#0x0
        LCALL   ??Onboard_wait?relay
//  500 }
        INC     R6
??Delay_ustt_0:
        MOV     A,R6
        CLR     C
        SUBB    A,R7
        JC      ??Delay_ustt_1
//  501 }
        LJMP    ?Subroutine0 & 0xFFFF
        CFI EndBlock cfiBlock12
//  502 
//  503 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  504 void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
GenericApp_MessageMSGCB:
        CFI Block cfiBlock13 Using cfiCommon0
        CFI Function GenericApp_MessageMSGCB
        CODE
//  505 {
        ; Saved register size: 0
        ; Auto size: 0
//  506   byte data ;
//  507      
//  508   switch ( pkt->clusterId )
//  509   {
//  510     case GENERICAPP_CLUSTERID:
//  511 #if defined(ZDO_COORDINATOR)
//  512       // "the" message
//  513 #else 
//  514       
//  515      data  = pkt->cmd.Data[0];    //osal_memcpy(&data, pkt->cmd.Data, 1);
//  516      
//  517      if(data == 0x10)
//  518        HalLedBlink(HAL_LED_2, 0, 50, 500); 
//  519     
//  520      else if(data == 0x20)
//  521        HalLedSet(HAL_LED_2, HAL_LED_OFF); 
//  522    
//  523      
//  524      else if(data == 0x30)
//  525        HalUARTWrite(HAL_UART_PORT_0,'it as on', 15);
//  526        HalLedSet(HAL_LED_3, HAL_LED_ON); 
//  527     
//  528      
//  529   
//  530       
//  531        
//  532       
//  533 #endif      
//  534       break;
//  535   }
//  536 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock13
//  537 
//  538 /*********************************************************************
//  539  * @fn      GenericApp_SendTheMessage
//  540  *
//  541  * @brief   Send "the" message.
//  542  *
//  543  * @param   none
//  544  *
//  545  * @return  none
//  546  */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  547 void GenericApp_SendTheMessage( void )
GenericApp_SendTheMessage:
        CFI Block cfiBlock14 Using cfiCommon0
        CFI Function GenericApp_SendTheMessage
        CODE
//  548 {
        FUNCALL GenericApp_SendTheMessage, AF_DataRequest
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 31, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 31, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 12
        MOV     A,#-0xc
        LCALL   ?ALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  549   afAddrType_t P2P_DstAddr;
//  550   P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
        MOV     A,#0x8
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0x2
        MOVX    @DPTR,A
//  551   P2P_DstAddr.endPoint = GENERICAPP_ENDPOINT;
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     A,#0xa
        LCALL   ?Subroutine4 & 0xFFFF
//  552   P2P_DstAddr.addr.shortAddr = 0xFFFF; //ÖÕ¶Ë¶ÌµØÖ·ÔÚLCDÉÏÓÐÏÔÊ¾£¬´Ë´¦»»³ÉÖÕ¶Ë¶ÌµØÖ·¾Í¿ÉÒÔµã²¥ÁË¡£
//  553   
//  554   if ( AF_DataRequest( &P2P_DstAddr, &GenericApp_epDesc,
//  555                        GENERICAPP_CLUSTERID,
//  556                        1,
//  557                        recData,
//  558                        &GenericApp_TransID,
//  559                        AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
??CrossCallReturnLabel_1:
        ; Setup parameters for call to function AF_DataRequest
        MOV     ?V0 + 0,#0x1e
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_ONE
        CFI CFA_XSP16 add(XSP16, 23)
        MOV     ?V0 + 0,#GenericApp_TransID & 0xff
        MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 25)
        MOV     ?V0 + 0,#recData & 0xff
        MOV     ?V0 + 1,#(recData >> 8) & 0xff
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 27)
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 29)
        MOV     R0,#?V0 + 0
        LCALL   ?PUSH_XSTACK_I_TWO
        CFI CFA_XSP16 add(XSP16, 31)
        MOV     R1,#0x20
        MOV     R4,#GenericApp_epDesc & 0xff
        MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
        MOV     A,#0x9
        LCALL   ?XSTACK_DISP0_8
        MOV     R2,DPL
        MOV     R3,DPH
        LCALL   ??AF_DataRequest?relay
        MOV     A,#0x9
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 22)
//  560   {
//  561     // Successfully requested to be sent.
//  562   }
//  563   else
//  564   {
//  565     // Error occurred in request to send.
//  566   }
//  567 }
        MOV     A,#0xc
        LCALL   ?DEALLOC_XSTACK8
        CFI CFA_XSP16 add(XSP16, 10)
        LJMP    ?Subroutine2 & 0xFFFF
        CFI EndBlock cfiBlock14

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine4:
        CFI Block cfiCond15 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_0
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 21)
        CFI Block cfiCond16 Using cfiCommon0
        CFI (cfiCond16) NoFunction
        CFI (cfiCond16) Conditional ??CrossCallReturnLabel_1
        CFI (cfiCond16) R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond16) VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond16) V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond16) V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond16) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond16) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond16) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond16) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond16) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond16) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond16) CFA_SP SP+0
        CFI (cfiCond16) CFA_XSP16 add(XSP16, 22)
        CFI Block cfiPicker17 Using cfiCommon1
        CFI (cfiPicker17) NoFunction
        CFI (cfiPicker17) Picker
        LCALL   ?Subroutine5 & 0xFFFF
??CrossCallReturnLabel_4:
        MOV     A,#-0x1
        MOVX    @DPTR,A
        INC     DPTR
        MOVX    @DPTR,A
        RET
        CFI EndBlock cfiCond15
        CFI EndBlock cfiCond16
        CFI EndBlock cfiPicker17
//  568 

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  569 static void rxCB(uint8 port,uint8 event)
rxCB:
        CFI Block cfiBlock18 Using cfiCommon0
        CFI Function rxCB
        CODE
//  570 {   
        FUNCALL rxCB, Hal_UART_RxBufLen
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTRead
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, strstr
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, GenericApp_SendTheMessage
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        FUNCALL rxCB, HalUARTWrite
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     ?V0 + 0,R2
//  571   if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
//  572 #if SERIAL_APP_LOOPBACK
//  573       (SerialApp_TxLen < SERIAL_APP_TX_MAX))
//  574 #else
//  575       !SerialApp_TxLen)
        MOV     A,#0x7
        ANL     A,?V0 + 0
        JNZ     $+5
        LJMP    ??rxCB_0 & 0xFFFF
        MOV     DPTR,#SerialApp_TxLen
        MOVX    A,@DPTR
        JZ      $+5
        LJMP    ??rxCB_0 & 0xFFFF
//  576 #endif
//  577   { 
//  578     uint16 len = Hal_UART_RxBufLen(HAL_UART_PORT_0);
//  579     SerialApp_TxLen = HalUARTRead(HAL_UART_PORT_0, RxBuf,len);
        ; Setup parameters for call to function HalUARTRead
        ; Setup parameters for call to function Hal_UART_RxBufLen
        MOV     R1,#0x0
        LCALL   ??Hal_UART_RxBufLen?relay
        MOV     A,R2
        MOV     R4,A
        MOV     A,R3
        MOV     R5,A
        MOV     R2,#RxBuf & 0xff
        MOV     R3,#(RxBuf >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTRead?relay
        MOV     A,R2
        MOV     DPTR,#SerialApp_TxLen
        MOVX    @DPTR,A
//  580       if ( strstr(RxBuf, "CWMODE=1") != NULL&&strstr(RxBuf, "OK") != NULL )
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "CWMODE=1">` & 0xff
        MOV     R5,#(`?<Constant "CWMODE=1">` >> 8) & 0xff
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_10:
        JZ      ??rxCB_1
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_5:
        JZ      ??rxCB_1
//  581           {
//  582               HalUARTWrite(HAL_UART_PORT_0,"AT+CWJAP=\"MI 6\",\"123456789q\"\r\n", strlen("AT+CWJAP=\"MI 6\",\"123456789q\"\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1e
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CWJAP=\\"MI 6\\",\\"1234...">` & 0xff
        MOV     R3,#(`?<Constant "AT+CWJAP=\\"MI 6\\",\\"1234...">` >> 8) & 0xff
        LJMP    ??rxCB_2 & 0xFFFF
//  583           }
//  584       else if ( strstr(RxBuf, "IFI GOT IP") != NULL )
??rxCB_1:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "IFI GOT IP">` & 0xff
        MOV     R5,#(`?<Constant "IFI GOT IP">` >> 8) & 0xff
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_11:
        JZ      ??rxCB_3
//  585           {
//  586               HalUARTWrite(HAL_UART_PORT_0, "AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xd
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
        LJMP    ??rxCB_2 & 0xFFFF
//  587              
//  588           }
//  589       else if (strstr(RxBuf, "AT+CIPMUX=1") != NULL  && strstr(RxBuf, "OK") != NULL )
??rxCB_3:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "AT+CIPMUX=1">` & 0xff
        MOV     R5,#(`?<Constant "AT+CIPMUX=1">` >> 8) & 0xff
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_12:
        JZ      ??rxCB_4
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_6:
        JZ      ??rxCB_4
//  590           {
//  591 
//  592               HalUARTWrite(HAL_UART_PORT_0,"AT+CIPSERVER=1,8800\r\n", strlen("AT+CIPSERVER=1,8800\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x15
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSERVER=1,8800\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSERVER=1,8800\\r\\n">` >> 8) & 0xff
        LJMP    ??rxCB_2 & 0xFFFF
//  593            
//  594           }
//  595       else if ( strstr(RxBuf, "AT+CIPSERVER=1,8800") != NULL  && strstr(RxBuf, "OK") != NULL  )  
??rxCB_4:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "AT+CIPSERVER=1,8800">` & 0xff
        MOV     R5,#(`?<Constant "AT+CIPSERVER=1,8800">` >> 8) & 0xff
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_13:
        JZ      ??rxCB_5
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_7:
        JZ      ??rxCB_5
//  596           {
//  597            
//  598               HalUARTWrite(HAL_UART_PORT_0, "AT+CIPSTART=0,\"TCP\",\"206.253.164.235\",10086\r\n", strlen("AT+CIPSTART=0,\"TCP\",\"206.253.164.235\",10086\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x2d
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSTART=0,\\"TCP\\",\\"...">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSTART=0,\\"TCP\\",\\"...">` >> 8) & 0xff
        LJMP    ??rxCB_2 & 0xFFFF
//  599           
//  600           }
//  601       else if (strstr(RxBuf, "ONNECT") != NULL  && strstr(RxBuf, "OK") != NULL )
??rxCB_5:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "ONNECT">` & 0xff
        MOV     R5,#(`?<Constant "ONNECT">` >> 8) & 0xff
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_14:
        JZ      ??rxCB_6
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_8:
        JZ      ??rxCB_6
//  602           {
//  603            
//  604                HalUARTWrite(HAL_UART_PORT_0, "AT+CIPSEND=0,9\r\n", strlen("AT+CIPSEND=0,9\r\n"));
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x10
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "AT+CIPSEND=0,9\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "AT+CIPSEND=0,9\\r\\n">` >> 8) & 0xff
        SJMP    ??rxCB_2
//  605           }
//  606       else if (strstr(RxBuf, "CIPSEND=0,9") != NULL  && strstr(RxBuf, "OK") != NULL )
??rxCB_6:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "CIPSEND=0,9">` & 0xff
        MOV     R5,#(`?<Constant "CIPSEND=0,9">` >> 8) & 0xff
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_15:
        JZ      ??rxCB_7
        ; Setup parameters for call to function strstr
        LCALL   ?Subroutine3 & 0xFFFF
??CrossCallReturnLabel_9:
        JZ      ??rxCB_7
//  607            {
//  608               HalUARTWrite(HAL_UART_PORT_0, "CONN_9527\r\n", strlen("CONN_9527\r\n"));   
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0xb
        MOV     R5,#0x0
        MOV     R2,#`?<Constant "CONN_9527\\r\\n">` & 0xff
        MOV     R3,#(`?<Constant "CONN_9527\\r\\n">` >> 8) & 0xff
        SJMP    ??rxCB_2
//  609           }
//  610       else if(strstr(RxBuf, "IPD,0,") != NULL)
??rxCB_7:
        ; Setup parameters for call to function strstr
        MOV     R4,#`?<Constant "IPD,0,">` & 0xff
        MOV     R5,#(`?<Constant "IPD,0,">` >> 8) & 0xff
        LCALL   ??Subroutine6_0 & 0xFFFF
??CrossCallReturnLabel_16:
        JZ      ??rxCB_8
//  611       { 
//  612         
//  613         if(RxBuf[11]== 0x01 && RxBuf[12] == 0x00 && RxBuf[13] == 0x00){
        MOV     DPTR,#RxBuf + 11
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??rxCB_9
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??rxCB_8
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??rxCB_8
//  614           HalUARTWrite(HAL_UART_PORT_0,&RxBuf[11], 1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#(RxBuf + 11) & 0xff
        MOV     R3,#((RxBuf + 11) >> 8) & 0xff
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  615           recData[0]= 0x10;
        MOV     DPTR,#recData
        MOV     A,#0x10
        SJMP    ??rxCB_10
//  616           GenericApp_SendTheMessage();
//  617           HalUARTWrite(HAL_UART_PORT_0,&recData[0], 1);
//  618         }
//  619         else if (RxBuf[11] == 0x00 && RxBuf[12] == 0x01 && RxBuf[13] == 0x00){
??rxCB_9:
        MOV     A,R0
        JNZ     ??rxCB_8
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     A,#0x1
        XRL     A,R0
        JNZ     ??rxCB_11
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??rxCB_8
//  620           recData[0] = 0x20;
        MOV     DPTR,#recData
        MOV     A,#0x20
        SJMP    ??rxCB_10
//  621           GenericApp_SendTheMessage();
//  622           HalUARTWrite(HAL_UART_PORT_0,recData, 1);
//  623         }
??rxCB_11:
        MOV     A,R0
        JNZ     ??rxCB_8
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??rxCB_8
//  624         else if (RxBuf[11] == 0x00 && RxBuf[12] == 0x00 && RxBuf[13] == 0x01){
//  625           *recData = 0x30;
        MOV     DPTR,#recData
        MOV     A,#0x30
??rxCB_10:
        MOVX    @DPTR,A
//  626           GenericApp_SendTheMessage();
        ; Setup parameters for call to function GenericApp_SendTheMessage
        LCALL   ??GenericApp_SendTheMessage?relay
//  627           HalUARTWrite(HAL_UART_PORT_0,recData, 1);
        ; Setup parameters for call to function HalUARTWrite
        MOV     R4,#0x1
        MOV     R5,#0x0
        MOV     R2,#recData & 0xff
        MOV     R3,#(recData >> 8) & 0xff
??rxCB_2:
        MOV     R1,#0x0
        LCALL   ??HalUARTWrite?relay
//  628         }
//  629       }
//  630       SerialApp_TxLen=0;
??rxCB_8:
        MOV     DPTR,#SerialApp_TxLen
        CLR     A
        MOVX    @DPTR,A
//  631     }
//  632   }
??rxCB_0:
        LJMP    ?Subroutine1 & 0xFFFF
        CFI EndBlock cfiBlock18

        RSEG BANKED_CODE:CODE:NOROOT(0)
?Subroutine3:
        CFI Block cfiCond19 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_5
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond20 Using cfiCommon0
        CFI (cfiCond20) NoFunction
        CFI (cfiCond20) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond20) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond20) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond20) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond20) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond20) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond20) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond20) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond20) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond20) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond20) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond20) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond20) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond20) CFA_SP SP+0
        CFI (cfiCond20) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond21 Using cfiCommon0
        CFI (cfiCond21) NoFunction
        CFI (cfiCond21) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond21) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond21) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond21) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond21) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond21) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond21) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond21) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond21) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond21) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond21) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond21) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond21) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond21) CFA_SP SP+0
        CFI (cfiCond21) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond22 Using cfiCommon0
        CFI (cfiCond22) NoFunction
        CFI (cfiCond22) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond22) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond22) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond22) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond22) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond22) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond22) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond22) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond22) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond22) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond22) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond22) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond22) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond22) CFA_SP SP+0
        CFI (cfiCond22) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond23 Using cfiCommon0
        CFI (cfiCond23) NoFunction
        CFI (cfiCond23) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond23) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond23) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond23) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond23) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond23) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond23) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond23) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond23) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond23) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond23) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond23) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond23) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond23) CFA_SP SP+0
        CFI (cfiCond23) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker24 Using cfiCommon1
        CFI (cfiPicker24) NoFunction
        CFI (cfiPicker24) Picker
        MOV     R4,#`?<Constant "OK">` & 0xff
        MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
        CFI EndBlock cfiCond19
        CFI EndBlock cfiCond20
        CFI EndBlock cfiCond21
        CFI EndBlock cfiCond22
        CFI EndBlock cfiCond23
        CFI EndBlock cfiPicker24
        REQUIRE ??Subroutine6_0
        ; // Fall through to label ??Subroutine6_0

        RSEG BANKED_CODE:CODE:NOROOT(0)
??Subroutine6_0:
        CFI Block cfiCond25 Using cfiCommon0
        CFI NoFunction
        CFI Conditional ??CrossCallReturnLabel_10
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond26 Using cfiCommon0
        CFI (cfiCond26) NoFunction
        CFI (cfiCond26) Conditional ??CrossCallReturnLabel_11
        CFI (cfiCond26) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond26) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond26) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond26) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond26) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond26) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond26) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond26) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond26) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond26) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond26) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond26) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond26) CFA_SP SP+0
        CFI (cfiCond26) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond27 Using cfiCommon0
        CFI (cfiCond27) NoFunction
        CFI (cfiCond27) Conditional ??CrossCallReturnLabel_12
        CFI (cfiCond27) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond27) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond27) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond27) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond27) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond27) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond27) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond27) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond27) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond27) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond27) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond27) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond27) CFA_SP SP+0
        CFI (cfiCond27) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond28 Using cfiCommon0
        CFI (cfiCond28) NoFunction
        CFI (cfiCond28) Conditional ??CrossCallReturnLabel_13
        CFI (cfiCond28) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond28) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond28) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond28) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond28) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond28) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond28) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond28) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond28) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond28) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond28) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond28) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond28) CFA_SP SP+0
        CFI (cfiCond28) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond29 Using cfiCommon0
        CFI (cfiCond29) NoFunction
        CFI (cfiCond29) Conditional ??CrossCallReturnLabel_14
        CFI (cfiCond29) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond29) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond29) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond29) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond29) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond29) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond29) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond29) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond29) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond29) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond29) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond29) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond29) CFA_SP SP+0
        CFI (cfiCond29) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond30 Using cfiCommon0
        CFI (cfiCond30) NoFunction
        CFI (cfiCond30) Conditional ??CrossCallReturnLabel_15
        CFI (cfiCond30) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond30) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond30) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond30) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond30) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond30) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond30) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond30) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond30) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond30) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond30) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond30) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond30) CFA_SP SP+0
        CFI (cfiCond30) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond31 Using cfiCommon0
        CFI (cfiCond31) NoFunction
        CFI (cfiCond31) Conditional ??CrossCallReturnLabel_16
        CFI (cfiCond31) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond31) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond31) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond31) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond31) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond31) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond31) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond31) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond31) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond31) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond31) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond31) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond31) CFA_SP SP+0
        CFI (cfiCond31) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond32 Using cfiCommon0
        CFI (cfiCond32) NoFunction
        CFI (cfiCond32) Conditional ??CrossCallReturnLabel_5
        CFI (cfiCond32) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond32) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond32) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond32) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond32) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond32) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond32) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond32) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond32) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond32) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond32) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond32) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond32) CFA_SP SP+0
        CFI (cfiCond32) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond33 Using cfiCommon0
        CFI (cfiCond33) NoFunction
        CFI (cfiCond33) Conditional ??CrossCallReturnLabel_6
        CFI (cfiCond33) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond33) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond33) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond33) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond33) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond33) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond33) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond33) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond33) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond33) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond33) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond33) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond33) CFA_SP SP+0
        CFI (cfiCond33) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond34 Using cfiCommon0
        CFI (cfiCond34) NoFunction
        CFI (cfiCond34) Conditional ??CrossCallReturnLabel_7
        CFI (cfiCond34) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond34) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond34) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond34) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond34) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond34) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond34) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond34) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond34) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond34) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond34) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond34) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond34) CFA_SP SP+0
        CFI (cfiCond34) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond35 Using cfiCommon0
        CFI (cfiCond35) NoFunction
        CFI (cfiCond35) Conditional ??CrossCallReturnLabel_8
        CFI (cfiCond35) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond35) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond35) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond35) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond35) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond35) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond35) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond35) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond35) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond35) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond35) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond35) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond35) CFA_SP SP+0
        CFI (cfiCond35) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiCond36 Using cfiCommon0
        CFI (cfiCond36) NoFunction
        CFI (cfiCond36) Conditional ??CrossCallReturnLabel_9
        CFI (cfiCond36) R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI (cfiCond36) VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI (cfiCond36) V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI (cfiCond36) V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI (cfiCond36) V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI (cfiCond36) V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI (cfiCond36) R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI (cfiCond36) ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI (cfiCond36) ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI (cfiCond36) ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI (cfiCond36) DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI (cfiCond36) DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI (cfiCond36) CFA_SP SP+0
        CFI (cfiCond36) CFA_XSP16 add(XSP16, 12)
        CFI Block cfiPicker37 Using cfiCommon1
        CFI (cfiPicker37) NoFunction
        CFI (cfiPicker37) Picker
        MOV     R2,#RxBuf & 0xff
        MOV     R3,#(RxBuf >> 8) & 0xff
        LCALL   ??strstr?relay
        MOV     ?V0 + 3,R3
        MOV     A,R2
        ORL     A,?V0 + 3
        RET
        CFI EndBlock cfiCond25
        CFI EndBlock cfiCond26
        CFI EndBlock cfiCond27
        CFI EndBlock cfiCond28
        CFI EndBlock cfiCond29
        CFI EndBlock cfiCond30
        CFI EndBlock cfiCond31
        CFI EndBlock cfiCond32
        CFI EndBlock cfiCond33
        CFI EndBlock cfiCond34
        CFI EndBlock cfiCond35
        CFI EndBlock cfiCond36
        CFI EndBlock cfiPicker37

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_Init?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_Init

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessEvent?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_ProcessEvent

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_ProcessZDOMsgs?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_ProcessZDOMsgs

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_HandleKeys?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_HandleKeys

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??Delay_ustt?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    Delay_ustt

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_MessageMSGCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_MessageMSGCB

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??GenericApp_SendTheMessage?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    GenericApp_SendTheMessage

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??rxCB?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    rxCB

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "UartIni04 RR\\r\\n">`:
        DB "UartIni04 RR\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWMODE=1\\r\\n">`:
        DB "AT+CWMODE=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CWMODE=1">`:
        DB "CWMODE=1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "OK">`:
        DB "OK"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CWJAP=\\"MI 6\\",\\"1234...">`:
        DB "AT+CWJAP=\"MI 6\",\"123456789q\"\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "IFI GOT IP">`:
        DB "IFI GOT IP"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMUX=1\\r\\n">`:
        DB "AT+CIPMUX=1\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPMUX=1">`:
        DB "AT+CIPMUX=1"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSERVER=1,8800\\r\\n">`:
        DB "AT+CIPSERVER=1,8800\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSERVER=1,8800">`:
        DB "AT+CIPSERVER=1,8800"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSTART=0,\\"TCP\\",\\"...">`:
        DB "AT+CIPSTART=0,\"TCP\",\"206.253.164.235\",10086\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "ONNECT">`:
        DB "ONNECT"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "AT+CIPSEND=0,9\\r\\n">`:
        DB "AT+CIPSEND=0,9\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CIPSEND=0,9">`:
        DB "CIPSEND=0,9"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "CONN_9527\\r\\n">`:
        DB "CONN_9527\015\012"

        RSEG XDATA_ROM_C:CONST:REORDER:NOROOT(0)
        DATA8
`?<Constant "IPD,0,">`:
        DB "IPD,0,"

        END
//  633 
//  634 
//  635 
//  636 /*********************************************************************
//  637 *********************************************************************/
// 
// 1 201 bytes in segment BANKED_CODE
//    48 bytes in segment BANK_RELAYS
//   266 bytes in segment XDATA_ROM_C
//   128 bytes in segment XDATA_Z
// 
// 1 249 bytes of CODE  memory
//   266 bytes of CONST memory
//   128 bytes of XDATA memory
//
//Errors: none
//Warnings: 14
