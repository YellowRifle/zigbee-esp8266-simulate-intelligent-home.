###############################################################################
#                                                                             #
# IAR C/C++ Compiler V8.10.3.10338/W32 for 8051         03/May/2019  08:11:43 #
# Copyright 2004-2011 IAR Systems AB.                                         #
#                                                                             #
#    Core               =  plain                                              #
#    Code model         =  banked                                             #
#    Data model         =  large                                              #
#    Calling convention =  xdata reentrant                                    #
#    Constant location  =  data_rom                                           #
#    Dptr setup         =  1,16                                               #
#    Source file        =  F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµ #
#                          Àı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zs #
#                          tack\Samples\GenericApp\Source\GenericApp.c        #
#    Command line       =  -f "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×é #
#                          ÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Project #
#                          s\zstack\Samples\GenericApp\CC2530DB\..\..\..\Tool #
#                          s\CC2530DB\f8wCoord.cfg" (-DCPU32MHZ               #
#                          -DROOT=__near_func -DMAC_CFG_APP_PENDING_QUEUE=TRU #
#                          E -DZDO_COORDINATOR -DRTR_NWK -DBLINK_LEDS) -f     #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\Tools\C #
#                          C2530DB\f8wConfig.cfg" (-DSECURE=0                 #
#                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                  #
#                          -DDEFAULT_CHANLIST=0x00000800                      #
#                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                       #
#                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MA #
#                          SK=0x007F -DBEACON_REQUEST_DELAY=100               #
#                          -DBEACON_REQ_DELAY_MASK=0x00FF                     #
#                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_PO #
#                          LLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7             #
#                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3    #
#                          -DNWK_MAX_DATA_RETRIES=2                           #
#                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9         #
#                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40           #
#                          -DNWK_MAX_BINDING_ENTRIES=4                        #
#                          -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01,  #
#                          0x03, 0x05, 0x07, 0x09, 0x0B, 0x0D, 0x0F, 0x00,    #
#                          0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x0D}"         #
#                          -DMAC_MAX_FRAME_SIZE=116 "-DCONST=const __code"    #
#                          -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE     #
#                          -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100            #
#                          -DRESPONSE_POLL_RATE=100) -DREJOIN_POLL_RATE=440   #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\Source\GenericApp.c" -D   #
#                          ZIGBEEPRO -D ZTOOL_P1 -D xMT_TASK -D xMT_SYS_FUNC  #
#                          -D xMT_ZDO_FUNC -D LCD_SUPPORTED=DEBUG -lC         #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\CoordinatorEB-Pr #
#                          o\List\" -lA "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.Zsta #
#                          ckĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLED #
#                          µÆ\Projects\zstack\Samples\GenericApp\CC2530DB\Coo #
#                          rdinatorEB-Pro\List\" --diag_suppress Pe001,Pa010  #
#                          -o "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×é #
#                          ÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Project #
#                          s\zstack\Samples\GenericApp\CC2530DB\CoordinatorEB #
#                          -Pro\Obj\" -e --debug --core=plain --dptr=16,1     #
#                          --data_model=large --code_model=banked             #
#                          --calling_convention=xdata_reentrant               #
#                          --place_constants=data_rom --nr_virtual_regs 16    #
#                          -I "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×é #
#                          ÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Project #
#                          s\zstack\Samples\GenericApp\CC2530DB\" -I          #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\SOURCE\" -I   #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\ZMAIN\T #
#                          I2530DB\" -I "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.Zsta #
#                          ckĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLED #
#                          µÆ\Projects\zstack\Samples\GenericApp\CC2530DB\..\ #
#                          ..\..\..\..\COMPONENTS\MT\" -I                     #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\INCLUDE\" -I                         #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\HAL\TARGET\CC2530EB\" -I                 #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\MCU\CCSOC\" -I                      #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\OSAL\INCLUDE\" -I                        #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\AF\" -I "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼ #
#                          ¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿Ú #
#                          ÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\STACK\NWK\" -I   #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SEC\" -I                           #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SAPI\" -I                          #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\SYS\" -I                           #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\STACK\ZDO\" -I                           #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\ZMAC\F8W\" -I "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼ #
#                          ¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿Ú #
#                          ÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\C #
#                          C2530DB\..\..\..\..\..\COMPONENTS\ZMAC\" -I        #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SADDR\" -I                      #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\SERVICES\SDATA\" -I                      #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\INCLUDE\" -I                         #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\HIGH_LEVEL\" -I                      #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\" -I                 #
#                          "F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊ #
#                          µÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\z #
#                          stack\Samples\GenericApp\CC2530DB\..\..\..\..\..\C #
#                          OMPONENTS\MAC\LOW_LEVEL\srf04\SINGLE_CHIP\" -Ohz   #
#                          --require_prototypes                               #
#    List file          =  F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµ #
#                          Àı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zs #
#                          tack\Samples\GenericApp\CC2530DB\CoordinatorEB-Pro #
#                          \List\GenericApp.lst                               #
#    Object file        =  F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµ #
#                          Àı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zs #
#                          tack\Samples\GenericApp\CC2530DB\CoordinatorEB-Pro #
#                          \Obj\GenericApp.r51                                #
#                                                                             #
#                                                                             #
###############################################################################

F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\Source\GenericApp.c
      1          /**************************************************************************************************
      2            Filename:       GenericApp.c
      3            Revised:        $Date: 2009-03-18 15:56:27 -0700 (Wed, 18 Mar 2009) $
      4            Revision:       $Revision: 19453 $
      5          
      6            Description:    Generic Application (no Profile).
      7          
      8          
      9            Copyright 2004-2009 Texas Instruments Incorporated. All rights reserved.
     10          
     11            IMPORTANT: Your use of this Software is limited to those specific rights
     12            granted under the terms of a software license agreement between the user
     13            who downloaded the software, his/her employer (which must be your employer)
     14            and Texas Instruments Incorporated (the "License").  You may not use this
     15            Software unless you agree to abide by the terms of the License. The License
     16            limits your use, and you acknowledge, that the Software may not be modified,
     17            copied or distributed unless embedded on a Texas Instruments microcontroller
     18            or used solely and exclusively in conjunction with a Texas Instruments radio
     19            frequency transceiver, which is integrated into your product.  Other than for
     20            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     21            works of, modify, distribute, perform, display or sell this Software and/or
     22            its documentation for any purpose.
     23          
     24            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     25            PROVIDED AS IS?WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, 
     26            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE, 
     27            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     28            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     29            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     30            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     31            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     32            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     33            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     34            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     35          
     36            Should you have any questions regarding your right to use this Software,
     37            contact Texas Instruments Incorporated at www.TI.com. 
     38          **************************************************************************************************/
     39          
     40          /*********************************************************************
     41            This application isn't intended to do anything useful, it is
     42            intended to be a simple example of an application's structure.
     43          
     44            This application sends "Hello World" to another "Generic"
     45            application every 15 seconds.  The application will also
     46            receive "Hello World" packets.
     47          
     48            The "Hello World" messages are sent/received as MSG type message.
     49          
     50            This applications doesn't have a profile, so it handles everything
     51            directly - itself.
     52          
     53            Key control:
     54              SW1:
     55              SW2:  initiates end device binding
     56              SW3:
     57              SW4:  initiates a match description request
     58          *********************************************************************/
     59          
     60          /*********************************************************************
     61           * INCLUDES
     62           */
     63          #include <stdio.h>
     64          #include <string.h>
     65          
     66          #include "OSAL.h"
     67          #include "AF.h"
     68          #include "ZDApp.h"
     69          #include "ZDObject.h"
     70          #include "ZDProfile.h"
     71          #include "OnBoard.h"
     72          
     73          #include "GenericApp.h"
     74          #include "DebugTrace.h"
     75          
     76          /* HAL */
     77          #include "hal_lcd.h"
     78          #include "hal_led.h"
     79          #include "hal_key.h"
     80          #include "hal_uart.h"
     81          
     82          /*********************************************************************
     83           * MACROS
     84           */
     85          #define HAL_LED_OFF   1
     86          #define HAL_LED_ON    0
     87          
     88          // This is the max byte count per OTA message.
     89          #if !defined( SERIAL_APP_TX_MAX )
     90          #define SERIAL_APP_TX_MAX  100
     91          #endif
     92          
     93          /*********************************************************************
     94           * CONSTANTS
     95           */
     96          
     97          /*********************************************************************
     98           * TYPEDEFS
     99           */
    100          
    101          /*********************************************************************
    102           * GLOBAL VARIABLES
    103           */
    104          
    105          // This list should be filled with Application specific Cluster IDs.

   \                                 In  segment XDATA_ROM_C, align 1
    106          const cId_t GenericApp_ClusterList[GENERICAPP_MAX_CLUSTERS] =
   \                     GenericApp_ClusterList:
   \   000000   0100         DW 1
    107          {
    108            GENERICAPP_CLUSTERID
    109          };
    110          

   \                                 In  segment XDATA_ROM_C, align 1
    111          const SimpleDescriptionFormat_t GenericApp_SimpleDesc =
   \                     GenericApp_SimpleDesc:
   \   000000   0A           DB 10
   \   000001   040F         DW 3844
   \   000003   0100         DW 1
   \   000005   00           DB 0
   \   000006   01           DB 1
   \   000007   ....         DW GenericApp_ClusterList
   \   000009   01           DB 1
   \   00000A   ....         DW GenericApp_ClusterList
    112          {
    113            GENERICAPP_ENDPOINT,              //  int Endpoint;
    114            GENERICAPP_PROFID,                //  uint16 AppProfId[2];
    115            GENERICAPP_DEVICEID,              //  uint16 AppDeviceId[2];
    116            GENERICAPP_DEVICE_VERSION,        //  int   AppDevVer:4;
    117            GENERICAPP_FLAGS,                 //  int   AppFlags:4;
    118            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    119            (cId_t *)GenericApp_ClusterList,  //  byte *pAppInClusterList;
    120            GENERICAPP_MAX_CLUSTERS,          //  byte  AppNumInClusters;
    121            (cId_t *)GenericApp_ClusterList   //  byte *pAppInClusterList;
    122          };
    123          
    124          // This is the Endpoint/Interface description.  It is defined here, but
    125          // filled-in in GenericApp_Init().  Another way to go would be to fill
    126          // in the structure here and make it a "const" (in code space).  The
    127          // way it's defined in this sample app it is define in RAM.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    128          endPointDesc_t GenericApp_epDesc;
   \                     GenericApp_epDesc:
   \   000000                DS 6
   \   000006                REQUIRE __INIT_XDATA_Z
    129          
    130          /*********************************************************************
    131           * EXTERNAL VARIABLES
    132           */
    133          
    134          /*********************************************************************
    135           * EXTERNAL FUNCTIONS
    136           */
    137          
    138          /*********************************************************************
    139           * LOCAL VARIABLES
    140           */

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    141          byte GenericApp_TaskID;   // Task ID for internal task/event processing
   \                     GenericApp_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    142                                    // This variable will be received when
    143                                    // GenericApp_Init() is called.

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    144          devStates_t GenericApp_NwkState;
   \                     GenericApp_NwkState:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    145          
    146          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    147          byte GenericApp_TransID;  // This is the unique message ID (counter)
   \                     GenericApp_TransID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    148          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    149          afAddrType_t GenericApp_DstAddr;
   \                     GenericApp_DstAddr:
   \   000000                DS 12
   \   00000C                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    150          unsigned char RxBuf[SERIAL_APP_TX_MAX+1];
   \                     RxBuf:
   \   000000                DS 101
   \   000065                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    151          byte recData[1];
   \                     recData:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    152          static uint8 SerialApp_TxLen;
   \                     SerialApp_TxLen:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    153          int httpCon1 = 0;
   \                     httpCon1:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    154          int httpsend = 0;
   \                     httpsend:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    155          
    156          /*********************************************************************
    157           * LOCAL FUNCTIONS
    158           */
    159          void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg );
    160          void GenericApp_HandleKeys( byte shift, byte keys );
    161          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pckt );
    162          void GenericApp_SendTheMessage( void );
    163          void rxCB(uint8 port,uint8 event);
    164          void Delay_ustt(uint8 Time);
    165          
    166          /*********************************************************************
    167           * NETWORK LAYER CALLBACKS
    168           */
    169          
    170          /*********************************************************************
    171           * PUBLIC FUNCTIONS
    172           */
    173          
    174          /*********************************************************************
    175           * @fn      GenericApp_Init
    176           *
    177           * @brief   Initialization function for the Generic App Task.
    178           *          This is called during initialization and should contain
    179           *          any application specific initialization (ie. hardware
    180           *          initialization/setup, table initialization, power up
    181           *          notificaiton ... ).
    182           *
    183           * @param   task_id - the ID assigned by OSAL.  This ID should be
    184           *                    used to send messages and set timers.
    185           *
    186           * @return  none
    187           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    188          void GenericApp_Init( byte task_id )
   \                     GenericApp_Init:
    189          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 29
   \   000005   74E3         MOV     A,#-0x1d
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
    190            halUARTCfg_t uartConfig;
    191            
    192            GenericApp_TaskID = task_id;
   \   00000B   90....       MOV     DPTR,#GenericApp_TaskID
   \   00000E   F0           MOVX    @DPTR,A
    193            GenericApp_NwkState = DEV_INIT;
   \   00000F   90....       MOV     DPTR,#GenericApp_NwkState
   \   000012   7401         MOV     A,#0x1
   \   000014   F0           MOVX    @DPTR,A
    194            GenericApp_TransID = 0;
   \   000015   90....       MOV     DPTR,#GenericApp_TransID
   \   000018   E4           CLR     A
   \   000019   F0           MOVX    @DPTR,A
    195          
    196            // Device hardware initialization can be added here or in main() (Zmain.c).
    197            // If the hardware is application specific - add it here.
    198            // If the hardware is other parts of the device add it in main().
    199          
    200            GenericApp_DstAddr.addrMode = (afAddrMode_t)AddrNotPresent;
   \   00001A   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   00001D   F0           MOVX    @DPTR,A
    201            GenericApp_DstAddr.endPoint = 0;
   \   00001E   A3           INC     DPTR
   \   00001F   F0           MOVX    @DPTR,A
    202            GenericApp_DstAddr.addr.shortAddr = 0;
   \   000020   90....       MOV     DPTR,#GenericApp_DstAddr
   \   000023   F0           MOVX    @DPTR,A
   \   000024   A3           INC     DPTR
   \   000025   F0           MOVX    @DPTR,A
    203          
    204            // Fill out the endpoint description.
    205            GenericApp_epDesc.endPoint = GENERICAPP_ENDPOINT;
   \   000026   90....       MOV     DPTR,#GenericApp_epDesc
   \   000029   740A         MOV     A,#0xa
   \   00002B   F0           MOVX    @DPTR,A
    206            GenericApp_epDesc.task_id = &GenericApp_TaskID;
   \   00002C   A3           INC     DPTR
   \   00002D   74..         MOV     A,#GenericApp_TaskID & 0xff
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   74..         MOV     A,#(GenericApp_TaskID >> 8) & 0xff
   \   000033   F0           MOVX    @DPTR,A
    207            GenericApp_epDesc.simpleDesc
    208                      = (SimpleDescriptionFormat_t *)&GenericApp_SimpleDesc;
   \   000034   A3           INC     DPTR
   \   000035   74..         MOV     A,#GenericApp_SimpleDesc & 0xff
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   74..         MOV     A,#(GenericApp_SimpleDesc >> 8) & 0xff
   \   00003B   F0           MOVX    @DPTR,A
    209            GenericApp_epDesc.latencyReq = noLatencyReqs;
   \   00003C   A3           INC     DPTR
   \   00003D   E4           CLR     A
   \   00003E   F0           MOVX    @DPTR,A
    210          
    211            // Register the endpoint description with the AF
    212            afRegister( &GenericApp_epDesc );
   \   00003F                ; Setup parameters for call to function afRegister
   \   00003F   7A..         MOV     R2,#GenericApp_epDesc & 0xff
   \   000041   7B..         MOV     R3,#(GenericApp_epDesc >> 8) & 0xff
   \   000043   12....       LCALL   ??afRegister?relay
    213          
    214            // Register for all key events - This app will handle all key events
    215            RegisterForKeys( GenericApp_TaskID );
   \   000046                ; Setup parameters for call to function RegisterForKeys
   \   000046   90....       MOV     DPTR,#GenericApp_TaskID
   \   000049   E0           MOVX    A,@DPTR
   \   00004A   F9           MOV     R1,A
   \   00004B   12....       LCALL   ??RegisterForKeys?relay
    216            
    217            uartConfig.configured           = TRUE;              // 2x30 don't care - see uart driver.
   \   00004E   85..82       MOV     DPL,?XSP + 0
   \   000051   85..83       MOV     DPH,?XSP + 1
   \   000054   7401         MOV     A,#0x1
   \   000056   F0           MOVX    @DPTR,A
    218            uartConfig.baudRate             = HAL_UART_BR_115200;
   \   000057   12....       LCALL   ?XSTACK_DISP0_8
   \   00005A   7404         MOV     A,#0x4
   \   00005C   F0           MOVX    @DPTR,A
    219            uartConfig.flowControl          = FALSE;
   \   00005D   7402         MOV     A,#0x2
   \   00005F   12....       LCALL   ?XSTACK_DISP0_8
   \   000062   E4           CLR     A
   \   000063   F0           MOVX    @DPTR,A
    220            uartConfig.flowControlThreshold = 64;   // 2x30 don't care - see uart driver.
   \   000064   7403         MOV     A,#0x3
   \   000066   12....       LCALL   ?XSTACK_DISP0_8
   \   000069   7440         MOV     A,#0x40
   \   00006B   F0           MOVX    @DPTR,A
   \   00006C   A3           INC     DPTR
   \   00006D   E4           CLR     A
   \   00006E   F0           MOVX    @DPTR,A
    221            uartConfig.rx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
   \   00006F   740A         MOV     A,#0xa
   \   000071   12....       LCALL   ?XSTACK_DISP0_8
   \   000074   7480         MOV     A,#-0x80
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E4           CLR     A
   \   000079   F0           MOVX    @DPTR,A
    222            uartConfig.tx.maxBufSize        = 128;  // 2x30 don't care - see uart driver.
   \   00007A   7412         MOV     A,#0x12
   \   00007C   12....       LCALL   ?XSTACK_DISP0_8
   \   00007F   7480         MOV     A,#-0x80
   \   000081   F0           MOVX    @DPTR,A
   \   000082   A3           INC     DPTR
   \   000083   E4           CLR     A
   \   000084   F0           MOVX    @DPTR,A
    223            uartConfig.idleTimeout          = 6;    // 2x30 don't care - see uart driver.
   \   000085   7405         MOV     A,#0x5
   \   000087   12....       LCALL   ?XSTACK_DISP0_8
   \   00008A   7406         MOV     A,#0x6
   \   00008C   F0           MOVX    @DPTR,A
    224            uartConfig.intEnable            = TRUE; // 2x30 don't care - see uart driver.
   \   00008D   7416         MOV     A,#0x16
   \   00008F   12....       LCALL   ?XSTACK_DISP0_8
   \   000092   7401         MOV     A,#0x1
   \   000094   F0           MOVX    @DPTR,A
    225            uartConfig.callBackFunc         = rxCB;
   \   000095   741B         MOV     A,#0x1b
   \   000097   12....       LCALL   ?XSTACK_DISP0_8
   \   00009A   74..         MOV     A,#??rxCB?relay & 0xff
   \   00009C   F0           MOVX    @DPTR,A
   \   00009D   A3           INC     DPTR
   \   00009E   74..         MOV     A,#(??rxCB?relay >> 8) & 0xff
   \   0000A0   12....       LCALL   ?Subroutine5 & 0xFFFF
    226           
    227            
    228            // Update the display
    229           #if defined(ZDO_COORDINATOR)
    230              HalUARTOpen (HAL_UART_PORT_0, &uartConfig); 
   \                     ??CrossCallReturnLabel_2:
   \   0000A3   AA82         MOV     R2,DPL
   \   0000A5   AB83         MOV     R3,DPH
   \   0000A7   7900         MOV     R1,#0x0
   \   0000A9   12....       LCALL   ??HalUARTOpen?relay
    231              HalUARTWrite(HAL_UART_PORT_0,"UartIni04 RR\r\n", sizeof("UartInitr OK\r\n"));
   \   0000AC                ; Setup parameters for call to function HalUARTWrite
   \   0000AC   7C0F         MOV     R4,#0xf
   \   0000AE   7D00         MOV     R5,#0x0
   \   0000B0   7A..         MOV     R2,#`?<Constant "UartIni04 RR\\r\\n">` & 0xff
   \   0000B2   7B..         MOV     R3,#(`?<Constant "UartIni04 RR\\r\\n">` >> 8) & 0xff
   \   0000B4   7900         MOV     R1,#0x0
   \   0000B6   12....       LCALL   ??HalUARTWrite?relay
    232              Delay_ustt(20000000);
                                ^
Warning[Pe069]: integer conversion resulted in truncation
   \   0000B9                ; Setup parameters for call to function Delay_ustt
   \   0000B9   7900         MOV     R1,#0x0
   \   0000BB   12....       LCALL   ??Delay_ustt?relay
    233              HalUARTWrite(HAL_UART_PORT_0, "AT+CWMODE=1\r\n", strlen("AT+CWMODE=1\r\n"));     
   \   0000BE                ; Setup parameters for call to function HalUARTWrite
   \   0000BE   7C0D         MOV     R4,#0xd
   \   0000C0   7D00         MOV     R5,#0x0
   \   0000C2   7A..         MOV     R2,#`?<Constant "AT+CWMODE=1\\r\\n">` & 0xff
   \   0000C4   7B..         MOV     R3,#(`?<Constant "AT+CWMODE=1\\r\\n">` >> 8) & 0xff
   \   0000C6   7900         MOV     R1,#0x0
   \   0000C8   12....       LCALL   ??HalUARTWrite?relay
    234          
    235          #endif
    236              
    237            //ZDO_RegisterForZDOMsg( GenericApp_TaskID, End_Device_Bind_rsp );
    238            //ZDO_RegisterForZDOMsg( GenericApp_TaskID, Match_Desc_rsp );
    239          }
   \   0000CB   741D         MOV     A,#0x1d
   \   0000CD   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D0                REQUIRE ?Subroutine0
   \   0000D0                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   7F01         MOV     R7,#0x1
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   F0           MOVX    @DPTR,A
   \   000001                ; Setup parameters for call to function HalUARTOpen
   \   000001   85..82       MOV     DPL,?XSP + 0
   \   000004   85..83       MOV     DPH,?XSP + 1
   \   000007   22           RET
    240          
    241          /*********************************************************************
    242           * @fn      GenericApp_ProcessEvent
    243           *
    244           * @brief   Generic Application Task event processor.  This function
    245           *          is called to process all events for the task.  Events
    246           *          include timers, messages and any other user defined events.
    247           *
    248           * @param   task_id  - The OSAL assigned task ID.
    249           * @param   events - events to process.  This is a bit map and can
    250           *                   contain more than one event.
    251           *
    252           * @return  none
    253           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    254          UINT16 GenericApp_ProcessEvent( byte task_id, UINT16 events )
   \                     GenericApp_ProcessEvent:
    255          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
   \   000007   8B..         MOV     ?V0 + 1,R3
    256            afIncomingMSGPacket_t *MSGpkt;
    257            afDataConfirm_t *afDataConfirm;
    258          
    259            // Data Confirmation message fields
    260            byte sentEP;
    261            ZStatus_t sentStatus;
    262            byte sentTransID;       // This should match the value sent
    263            (void)task_id;  // Intentionally unreferenced parameter
    264          
    265            if ( events & SYS_EVENT_MSG )
   \   000009   EB           MOV     A,R3
   \   00000A   5480         ANL     A,#0x80
   \   00000C   6058         JZ      ??GenericApp_ProcessEvent_0
    266            {
    267              MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00000E                ; Setup parameters for call to function osal_msg_receive
   \   00000E   800D         SJMP    ??GenericApp_ProcessEvent_1
    268              while ( MSGpkt )
    269              {
    270                switch ( MSGpkt->hdr.event )
    271                {
    272                  case ZDO_CB_MSG:
    273                    GenericApp_ProcessZDOMsgs( (zdoIncomingMsg_t *)MSGpkt );
    274                    break;
    275                    
    276                  case KEY_CHANGE:
    277                    GenericApp_HandleKeys( ((keyChange_t *)MSGpkt)->state, ((keyChange_t *)MSGpkt)->keys );
    278                    break;
    279          
    280                  case AF_DATA_CONFIRM_CMD:
    281                    // This message is received as a confirmation of a data packet sent.
    282                    // The status is of ZStatus_t type [defined in ZComDef.h]
    283                    // The message fields are defined in AF.h
    284                    afDataConfirm = (afDataConfirm_t *)MSGpkt;
    285                    sentEP = afDataConfirm->endpoint;
    286                    sentStatus = afDataConfirm->hdr.status;
    287                    sentTransID = afDataConfirm->transID;
    288                    (void)sentEP;
    289                    (void)sentTransID;
    290          
    291                    // Action taken when confirmation is received.
    292                    if ( sentStatus != ZSuccess )
    293                    {
    294                      // The data wasn't delivered -- Do something
    295                    }
    296                    break;
    297          
    298                  case AF_INCOMING_MSG_CMD:
    299                    GenericApp_MessageMSGCB( MSGpkt );
    300                    break;
    301          
    302                  case ZDO_STATE_CHANGE:
    303                    GenericApp_NwkState = (devStates_t)(MSGpkt->hdr.status);
   \                     ??GenericApp_ProcessEvent_2:
   \   000010   A3           INC     DPTR
   \   000011   E0           MOVX    A,@DPTR
   \   000012   90....       MOV     DPTR,#GenericApp_NwkState
   \   000015   F0           MOVX    @DPTR,A
    304                    /*if ( (GenericApp_NwkState == DEV_ZB_COORD)
    305                        || (GenericApp_NwkState == DEV_ROUTER)
    306                        || (GenericApp_NwkState == DEV_END_DEVICE) )
    307                    {
    308                      // Start sending "the" message in a regular interval.
    309                      osal_start_timerEx( GenericApp_TaskID,
    310                                          GENERICAPP_SEND_MSG_EVT,
    311                                        GENERICAPP_SEND_MSG_TIMEOUT );
    312                    }*/
    313                    break;
    314          
    315                  default:
    316                    break;
    317                }
    318          
    319                // Release the memory
    320                osal_msg_deallocate( (uint8 *)MSGpkt );
   \                     ??GenericApp_ProcessEvent_3:
   \   000016                ; Setup parameters for call to function osal_msg_deallocate
   \   000016   EE           MOV     A,R6
   \   000017   FA           MOV     R2,A
   \   000018   EF           MOV     A,R7
   \   000019   FB           MOV     R3,A
   \   00001A   12....       LCALL   ??osal_msg_deallocate?relay
    321          
    322                // Next
    323                MSGpkt = (afIncomingMSGPacket_t *)osal_msg_receive( GenericApp_TaskID );
   \   00001D                ; Setup parameters for call to function osal_msg_receive
   \                     ??GenericApp_ProcessEvent_1:
   \   00001D   90....       MOV     DPTR,#GenericApp_TaskID
   \   000020   E0           MOVX    A,@DPTR
   \   000021   F9           MOV     R1,A
   \   000022   12....       LCALL   ??osal_msg_receive?relay
   \   000025   8A..         MOV     ?V0 + 2,R2
   \   000027   8B..         MOV     ?V0 + 3,R3
   \   000029   AE..         MOV     R6,?V0 + 2
   \   00002B   AF..         MOV     R7,?V0 + 3
   \   00002D   EE           MOV     A,R6
   \   00002E   4F           ORL     A,R7
   \   00002F   602C         JZ      ??GenericApp_ProcessEvent_4
   \   000031   8E82         MOV     DPL,R6
   \   000033   8F83         MOV     DPH,R7
   \   000035   E0           MOVX    A,@DPTR
   \   000036   2440         ADD     A,#0x40
   \   000038   6011         JZ      ??GenericApp_ProcessEvent_5
   \   00003A   24EF         ADD     A,#-0x11
   \   00003C   60D2         JZ      ??GenericApp_ProcessEvent_2
   \   00003E   24FE         ADD     A,#-0x2
   \   000040   70D4         JNZ     ??GenericApp_ProcessEvent_3
   \   000042                ; Setup parameters for call to function GenericApp_ProcessZDOMsgs
   \   000042   EE           MOV     A,R6
   \   000043   FA           MOV     R2,A
   \   000044   EF           MOV     A,R7
   \   000045   FB           MOV     R3,A
   \   000046   12....       LCALL   ??GenericApp_ProcessZDOMsgs?relay
   \   000049   80CB         SJMP    ??GenericApp_ProcessEvent_3
   \                     ??GenericApp_ProcessEvent_5:
   \   00004B                ; Setup parameters for call to function GenericApp_HandleKeys
   \   00004B   A3           INC     DPTR
   \   00004C   A3           INC     DPTR
   \   00004D   A3           INC     DPTR
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   FA           MOV     R2,A
   \   000050   8E82         MOV     DPL,R6
   \   000052   8F83         MOV     DPH,R7
   \   000054   A3           INC     DPTR
   \   000055   A3           INC     DPTR
   \   000056   E0           MOVX    A,@DPTR
   \   000057   F9           MOV     R1,A
   \   000058   12....       LCALL   ??GenericApp_HandleKeys?relay
   \   00005B   80B9         SJMP    ??GenericApp_ProcessEvent_3
    324              }
    325          
    326              // return unprocessed events
    327              return (events ^ SYS_EVENT_MSG);
   \                     ??GenericApp_ProcessEvent_4:
   \   00005D   AA..         MOV     R2,?V0 + 0
   \   00005F   E5..         MOV     A,?V0 + 1
   \   000061   6480         XRL     A,#0x80
   \   000063   FB           MOV     R3,A
   \   000064   8025         SJMP    ??GenericApp_ProcessEvent_6
    328            }
    329          
    330            // Send a message out - This event is generated by a timer
    331            //  (setup in GenericApp_Init()).
    332            if ( events & GENERICAPP_SEND_MSG_EVT )
   \                     ??GenericApp_ProcessEvent_0:
   \   000066   EA           MOV     A,R2
   \   000067   A2E0         MOV     C,0xE0 /* A   */.0
   \   000069   501C         JNC     ??GenericApp_ProcessEvent_7
    333            {
    334              // Send "the" message
    335              GenericApp_SendTheMessage();
   \   00006B                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   00006B   12....       LCALL   ??GenericApp_SendTheMessage?relay
    336          
    337              // Setup to send message again
    338              osal_start_timerEx( GenericApp_TaskID,
    339                                  GENERICAPP_SEND_MSG_EVT,
    340                                GENERICAPP_SEND_MSG_TIMEOUT );
   \   00006E                ; Setup parameters for call to function osal_start_timerEx
   \   00006E   7C88         MOV     R4,#-0x78
   \   000070   7D13         MOV     R5,#0x13
   \   000072   7A01         MOV     R2,#0x1
   \   000074   7B00         MOV     R3,#0x0
   \   000076   90....       MOV     DPTR,#GenericApp_TaskID
   \   000079   E0           MOVX    A,@DPTR
   \   00007A   F9           MOV     R1,A
   \   00007B   12....       LCALL   ??osal_start_timerEx?relay
    341          
    342              // return unprocessed events
    343              return (events ^ GENERICAPP_SEND_MSG_EVT);
   \   00007E   E5..         MOV     A,?V0 + 0
   \   000080   6401         XRL     A,#0x1
   \   000082   FA           MOV     R2,A
   \   000083   AB..         MOV     R3,?V0 + 1
   \   000085   8004         SJMP    ??GenericApp_ProcessEvent_6
    344            }
    345          
    346            // Discard unknown events
    347            return 0;
   \                     ??GenericApp_ProcessEvent_7:
   \   000087   7A00         MOV     R2,#0x0
   \   000089   7B00         MOV     R3,#0x0
   \                     ??GenericApp_ProcessEvent_6:
   \   00008B                REQUIRE ?Subroutine1
   \   00008B                ; // Fall through to label ?Subroutine1
    348          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   7F04         MOV     R7,#0x4
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    349          
    350          /*********************************************************************
    351           * Event Generation Functions
    352           */
    353          
    354          /*********************************************************************
    355           * @fn      GenericApp_ProcessZDOMsgs()
    356           *
    357           * @brief   Process response messages
    358           *
    359           * @param   none
    360           *
    361           * @return  none
    362           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    363          void GenericApp_ProcessZDOMsgs( zdoIncomingMsg_t *inMsg )
   \                     GenericApp_ProcessZDOMsgs:
    364          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    365            switch ( inMsg->clusterID )
   \   000005   EA           MOV     A,R2
   \   000006   240C         ADD     A,#0xc
   \   000008   F582         MOV     DPL,A
   \   00000A   EB           MOV     A,R3
   \   00000B   3400         ADDC    A,#0x0
   \   00000D   F583         MOV     DPH,A
   \   00000F   E0           MOVX    A,@DPTR
   \   000010   F5..         MOV     ?V0 + 0,A
   \   000012   A3           INC     DPTR
   \   000013   E0           MOVX    A,@DPTR
   \   000014   F5..         MOV     ?V0 + 1,A
   \   000016   78..         MOV     R0,#?V0 + 0
   \   000018   12....       LCALL   ?US_SWITCH_SPARSE
   \                     `?<Jumptable for GenericApp_ProcessZDOMsgs>_0`:
   \   00001B   0000         DW        0
   \   00001D   0200         DW        2
   \   00001F   0680         DW        32774
   \   000021   ....         DW        ??GenericApp_ProcessZDOMsgs_0
   \   000023   2080         DW        32800
   \   000025   ....         DW        ??GenericApp_ProcessZDOMsgs_1
   \   000027   ....         DW        ??GenericApp_ProcessZDOMsgs_2
    366            {
    367              case End_Device_Bind_rsp:
    368                if ( ZDO_ParseBindRsp( inMsg ) == ZSuccess )
   \                     ??GenericApp_ProcessZDOMsgs_1:
   \   000029   EA           MOV     A,R2
   \   00002A   2413         ADD     A,#0x13
   \   00002C   F582         MOV     DPL,A
   \   00002E   EB           MOV     A,R3
   \   00002F   3400         ADDC    A,#0x0
   \   000031   F583         MOV     DPH,A
   \   000033   E0           MOVX    A,@DPTR
   \   000034   F8           MOV     R0,A
   \   000035   A3           INC     DPTR
   \   000036   E0           MOVX    A,@DPTR
   \   000037   F583         MOV     DPH,A
   \   000039   8882         MOV     DPL,R0
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   7009         JNZ     ??GenericApp_ProcessZDOMsgs_3
    369                {
    370                  // Light LED
    371                  HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00003E                ; Setup parameters for call to function HalLedSet
   \   00003E   7A01         MOV     R2,#0x1
   \                     ??GenericApp_ProcessZDOMsgs_4:
   \   000040   7908         MOV     R1,#0x8
   \   000042   12....       LCALL   ??HalLedSet?relay
   \   000045   8053         SJMP    ??GenericApp_ProcessZDOMsgs_2
    372                }
    373          #if defined(BLINK_LEDS)
    374                else
    375                {
    376                  // Flash LED to show failure
    377                  HalLedSet ( HAL_LED_4, HAL_LED_MODE_FLASH );
   \                     ??GenericApp_ProcessZDOMsgs_3:
   \   000047                ; Setup parameters for call to function HalLedSet
   \   000047   7A04         MOV     R2,#0x4
   \   000049   80F5         SJMP    ??GenericApp_ProcessZDOMsgs_4
    378                }
    379          #endif
    380                break;
    381          
    382              case Match_Desc_rsp:
    383                {
    384                  ZDO_ActiveEndpointRsp_t *pRsp = ZDO_ParseEPListRsp( inMsg );
   \                     ??GenericApp_ProcessZDOMsgs_0:
   \   00004B                ; Setup parameters for call to function ZDO_ParseEPListRsp
   \   00004B   12....       LCALL   ??ZDO_ParseEPListRsp?relay
   \   00004E   8A..         MOV     ?V0 + 0,R2
   \   000050   8B..         MOV     ?V0 + 1,R3
   \   000052   AE..         MOV     R6,?V0 + 0
   \   000054   AF..         MOV     R7,?V0 + 1
    385                  if ( pRsp )
   \   000056   EE           MOV     A,R6
   \   000057   4F           ORL     A,R7
   \   000058   6040         JZ      ??GenericApp_ProcessZDOMsgs_2
    386                  {
    387                    if ( pRsp->status == ZSuccess && pRsp->cnt )
   \   00005A   8E82         MOV     DPL,R6
   \   00005C   8F83         MOV     DPH,R7
   \   00005E   E0           MOVX    A,@DPTR
   \   00005F   7032         JNZ     ??GenericApp_ProcessZDOMsgs_5
   \   000061   A3           INC     DPTR
   \   000062   A3           INC     DPTR
   \   000063   A3           INC     DPTR
   \   000064   E0           MOVX    A,@DPTR
   \   000065   602C         JZ      ??GenericApp_ProcessZDOMsgs_5
    388                    {
    389                      GenericApp_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   000067   90....       MOV     DPTR,#GenericApp_DstAddr + 8
   \   00006A   7402         MOV     A,#0x2
   \   00006C   F0           MOVX    @DPTR,A
    390                      GenericApp_DstAddr.addr.shortAddr = pRsp->nwkAddr;
   \   00006D   8E82         MOV     DPL,R6
   \   00006F   8F83         MOV     DPH,R7
   \   000071   A3           INC     DPTR
   \   000072   E0           MOVX    A,@DPTR
   \   000073   F8           MOV     R0,A
   \   000074   A3           INC     DPTR
   \   000075   E0           MOVX    A,@DPTR
   \   000076   F9           MOV     R1,A
   \   000077   90....       MOV     DPTR,#GenericApp_DstAddr
   \   00007A   E8           MOV     A,R0
   \   00007B   F0           MOVX    @DPTR,A
   \   00007C   A3           INC     DPTR
   \   00007D   E9           MOV     A,R1
   \   00007E   F0           MOVX    @DPTR,A
    391                      // Take the first endpoint, Can be changed to search through endpoints
    392                      GenericApp_DstAddr.endPoint = pRsp->epList[0];
   \   00007F   8E82         MOV     DPL,R6
   \   000081   8F83         MOV     DPH,R7
   \   000083   A3           INC     DPTR
   \   000084   A3           INC     DPTR
   \   000085   A3           INC     DPTR
   \   000086   A3           INC     DPTR
   \   000087   E0           MOVX    A,@DPTR
   \   000088   90....       MOV     DPTR,#GenericApp_DstAddr + 9
   \   00008B   F0           MOVX    @DPTR,A
    393          
    394                      // Light LED
    395                      HalLedSet( HAL_LED_4, HAL_LED_MODE_ON );
   \   00008C                ; Setup parameters for call to function HalLedSet
   \   00008C   7A01         MOV     R2,#0x1
   \   00008E   7908         MOV     R1,#0x8
   \   000090   12....       LCALL   ??HalLedSet?relay
    396                    }
    397                    osal_mem_free( pRsp );
   \                     ??GenericApp_ProcessZDOMsgs_5:
   \   000093                ; Setup parameters for call to function osal_mem_free
   \   000093   EE           MOV     A,R6
   \   000094   FA           MOV     R2,A
   \   000095   EF           MOV     A,R7
   \   000096   FB           MOV     R3,A
   \   000097   12....       LCALL   ??osal_mem_free?relay
    398                  }
    399                }
    400                break;
    401            }
    402          }
   \                     ??GenericApp_ProcessZDOMsgs_2:
   \   00009A                REQUIRE ?Subroutine2
   \   00009A                ; // Fall through to label ?Subroutine2

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   7F02         MOV     R7,#0x2
   \   000002   02....       LJMP    ?BANKED_LEAVE_XDATA
    403          
    404          /*********************************************************************
    405           * @fn      GenericApp_HandleKeys
    406           *
    407           * @brief   Handles all key events for this device.
    408           *
    409           * @param   shift - true if in shift/alt.
    410           * @param   keys - bit field for key events. Valid entries:
    411           *                 HAL_KEY_SW_4
    412           *                 HAL_KEY_SW_3
    413           *                 HAL_KEY_SW_2
    414           *                 HAL_KEY_SW_1
    415           *
    416           * @return  none
    417           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    418          void GenericApp_HandleKeys( byte shift, byte keys )
   \                     GenericApp_HandleKeys:
    419          {
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 9
   \   000005   74F7         MOV     A,#-0x9
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
   \   00000A   E9           MOV     A,R1
   \   00000B   FE           MOV     R6,A
   \   00000C   EA           MOV     A,R2
   \   00000D   FF           MOV     R7,A
    420            zAddrType_t dstAddr;
    421            
    422            // Shift is used to make each button/switch dual purpose.
    423            if ( shift )
   \   00000E   EE           MOV     A,R6
   \   00000F   6003         JZ      $+5
   \   000011   02....       LJMP    ??GenericApp_HandleKeys_0 & 0xFFFF
    424            {
    425              if ( keys & HAL_KEY_SW_1 )
    426              {
    427              }
    428              if ( keys & HAL_KEY_SW_2 )
    429              {
    430              }
    431              if ( keys & HAL_KEY_SW_3 )
    432              {
    433              }
    434              if ( keys & HAL_KEY_SW_4 )
    435              {
    436              }
    437            }
    438            else
    439            {
    440              if ( keys & HAL_KEY_SW_1 )
    441              {
    442              }
    443          
    444              if ( keys & HAL_KEY_SW_2 )
   \   000014   75....       MOV     ?V0 + 0,#GenericApp_ClusterList & 0xff
   \   000017   75....       MOV     ?V0 + 1,#(GenericApp_ClusterList >> 8) & 0xff
   \   00001A   EF           MOV     A,R7
   \   00001B   A2E1         MOV     C,0xE0 /* A   */.1
   \   00001D   5060         JNC     ??GenericApp_HandleKeys_1
    445              {
    446                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   00001F                ; Setup parameters for call to function HalLedSet
   \   00001F   7A00         MOV     R2,#0x0
   \   000021   7908         MOV     R1,#0x8
   \   000023   12....       LCALL   ??HalLedSet?relay
    447          
    448                // Initiate an End Device Bind Request for the mandatory endpoint
    449                dstAddr.addrMode = Addr16Bit;
   \   000026   7408         MOV     A,#0x8
   \   000028   12....       LCALL   ?XSTACK_DISP0_8
   \   00002B   7402         MOV     A,#0x2
   \   00002D   12....       LCALL   ?Subroutine5 & 0xFFFF
    450                dstAddr.addr.shortAddr = 0x0000; // Coordinator
   \                     ??CrossCallReturnLabel_3:
   \   000030   E4           CLR     A
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   F0           MOVX    @DPTR,A
    451                ZDP_EndDeviceBindReq( &dstAddr, NLME_GetShortAddr(), 
    452                                      GenericApp_epDesc.endPoint,
    453                                      GENERICAPP_PROFID,
    454                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    455                                      GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    456                                      FALSE );
   \   000034                ; Setup parameters for call to function NLME_GetShortAddr
   \   000034   12....       LCALL   ??NLME_GetShortAddr?relay
   \   000037   8A..         MOV     ?V0 + 2,R2
   \   000039   8B..         MOV     ?V0 + 3,R3
   \   00003B   AC..         MOV     R4,?V0 + 2
   \   00003D   AD..         MOV     R5,?V0 + 3
   \   00003F                ; Setup parameters for call to function ZDP_EndDeviceBindReq
   \   00003F   75..00       MOV     ?V0 + 2,#0x0
   \   000042   78..         MOV     R0,#?V0 + 2
   \   000044   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000047   78..         MOV     R0,#?V0 + 0
   \   000049   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004C   75..01       MOV     ?V0 + 2,#0x1
   \   00004F   78..         MOV     R0,#?V0 + 2
   \   000051   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000054   78..         MOV     R0,#?V0 + 0
   \   000056   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000059   78..         MOV     R0,#?V0 + 2
   \   00005B   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00005E   75..04       MOV     ?V0 + 2,#0x4
   \   000061   75..0F       MOV     ?V0 + 3,#0xf
   \   000064   78..         MOV     R0,#?V0 + 2
   \   000066   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000069   90....       MOV     DPTR,#GenericApp_epDesc
   \   00006C   E0           MOVX    A,@DPTR
   \   00006D   F9           MOV     R1,A
   \   00006E   7409         MOV     A,#0x9
   \   000070   12....       LCALL   ?XSTACK_DISP0_8
   \   000073   AA82         MOV     R2,DPL
   \   000075   AB83         MOV     R3,DPH
   \   000077   12....       LCALL   ??ZDP_EndDeviceBindReq?relay
   \   00007A   7409         MOV     A,#0x9
   \   00007C   12....       LCALL   ?DEALLOC_XSTACK8
    457              }
    458          
    459              if ( keys & HAL_KEY_SW_3 )
    460              {
    461              }
    462          
    463              if ( keys & HAL_KEY_SW_4 )
   \                     ??GenericApp_HandleKeys_1:
   \   00007F   EF           MOV     A,R7
   \   000080   A2E3         MOV     C,0xE0 /* A   */.3
   \   000082   504D         JNC     ??GenericApp_HandleKeys_0
    464              {
    465                HalLedSet ( HAL_LED_4, HAL_LED_MODE_OFF );
   \   000084                ; Setup parameters for call to function HalLedSet
   \   000084   7A00         MOV     R2,#0x0
   \   000086   7908         MOV     R1,#0x8
   \   000088   12....       LCALL   ??HalLedSet?relay
    466                // Initiate a Match Description Request (Service Discovery)
    467                dstAddr.addrMode = AddrBroadcast;
   \   00008B   7408         MOV     A,#0x8
   \   00008D   12....       LCALL   ?XSTACK_DISP0_8
   \   000090   740F         MOV     A,#0xf
   \   000092   12....       LCALL   ?Subroutine4 & 0xFFFF
    468                dstAddr.addr.shortAddr = NWK_BROADCAST_SHORTADDR;
    469                ZDP_MatchDescReq( &dstAddr, NWK_BROADCAST_SHORTADDR,
    470                                  GENERICAPP_PROFID,
    471                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    472                                  GENERICAPP_MAX_CLUSTERS, (cId_t *)GenericApp_ClusterList,
    473                                  FALSE );
   \                     ??CrossCallReturnLabel_0:
   \   000095                ; Setup parameters for call to function ZDP_MatchDescReq
   \   000095   75..00       MOV     ?V0 + 2,#0x0
   \   000098   78..         MOV     R0,#?V0 + 2
   \   00009A   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   00009D   78..         MOV     R0,#?V0 + 0
   \   00009F   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000A2   75..01       MOV     ?V0 + 2,#0x1
   \   0000A5   78..         MOV     R0,#?V0 + 2
   \   0000A7   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   0000AA   78..         MOV     R0,#?V0 + 0
   \   0000AC   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000AF   75..04       MOV     ?V0 + 0,#0x4
   \   0000B2   75..0F       MOV     ?V0 + 1,#0xf
   \   0000B5   78..         MOV     R0,#?V0 + 0
   \   0000B7   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   0000BA   7901         MOV     R1,#0x1
   \   0000BC   7CFF         MOV     R4,#-0x1
   \   0000BE   7DFF         MOV     R5,#-0x1
   \   0000C0   7408         MOV     A,#0x8
   \   0000C2   12....       LCALL   ?XSTACK_DISP0_8
   \   0000C5   AA82         MOV     R2,DPL
   \   0000C7   AB83         MOV     R3,DPH
   \   0000C9   12....       LCALL   ??ZDP_MatchDescReq?relay
   \   0000CC   7408         MOV     A,#0x8
   \   0000CE   12....       LCALL   ?DEALLOC_XSTACK8
    474              }
    475            }
    476          }
   \                     ??GenericApp_HandleKeys_0:
   \   0000D1   7409         MOV     A,#0x9
   \   0000D3   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000D6   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_4:
   \   000003   74FF         MOV     A,#-0x1
   \   000005   F0           MOVX    @DPTR,A
   \   000006   A3           INC     DPTR
   \   000007   F0           MOVX    @DPTR,A
   \   000008   22           RET
    477          
    478          /*********************************************************************
    479           * LOCAL FUNCTIONS
    480           */
    481          
    482          /*********************************************************************
    483           * @fn      GenericApp_MessageMSGCB
    484           *
    485           * @brief   Data message processor callback.  This function processes
    486           *          any incoming data - probably from other devices.  So, based
    487           *          on cluster ID, perform the intended action.
    488           *
    489           * @param   none
    490           *
    491           * @return  none
    492           */
    493          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    494          void Delay_ustt(uint8 Time) //usÑÓÊ±
   \                     Delay_ustt:
    495          {
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
   \   000005   E9           MOV     A,R1
   \   000006   FF           MOV     R7,A
    496          unsigned char i;
    497          for(i=0;i<Time;i++)
   \   000007   7E00         MOV     R6,#0x0
   \   000009   8008         SJMP    ??Delay_ustt_0
    498          {
    499          MicroWait(1);
   \                     ??Delay_ustt_1:
   \   00000B                ; Setup parameters for call to function Onboard_wait
   \   00000B   7A01         MOV     R2,#0x1
   \   00000D   7B00         MOV     R3,#0x0
   \   00000F   12....       LCALL   ??Onboard_wait?relay
    500          }
   \   000012   0E           INC     R6
   \                     ??Delay_ustt_0:
   \   000013   EE           MOV     A,R6
   \   000014   C3           CLR     C
   \   000015   9F           SUBB    A,R7
   \   000016   40F3         JC      ??Delay_ustt_1
    501          }
   \   000018   02....       LJMP    ?Subroutine0 & 0xFFFF
    502          
    503          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    504          void GenericApp_MessageMSGCB( afIncomingMSGPacket_t *pkt )
   \                     GenericApp_MessageMSGCB:
    505          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
    506            byte data ;
                        ^
Warning[Pe177]: variable "data" was declared but never referenced
    507               
    508            switch ( pkt->clusterId )
    509            {
    510              case GENERICAPP_CLUSTERID:
    511          #if defined(ZDO_COORDINATOR)
    512                // "the" message
    513          #else 
    514                
    515               data  = pkt->cmd.Data[0];    //osal_memcpy(&data, pkt->cmd.Data, 1);
    516               
    517               if(data == 0x10)
    518                 HalLedBlink(HAL_LED_2, 0, 50, 500); 
    519              
    520               else if(data == 0x20)
    521                 HalLedSet(HAL_LED_2, HAL_LED_OFF); 
    522             
    523               
    524               else if(data == 0x30)
    525                 HalUARTWrite(HAL_UART_PORT_0,'it as on', 15);
    526                 HalLedSet(HAL_LED_3, HAL_LED_ON); 
    527              
    528               
    529            
    530                
    531                 
    532                
    533          #endif      
    534                break;
    535            }
    536          }
   \   000000   02....       LJMP    ?BRET
    537          
    538          /*********************************************************************
    539           * @fn      GenericApp_SendTheMessage
    540           *
    541           * @brief   Send "the" message.
    542           *
    543           * @param   none
    544           *
    545           * @return  none
    546           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    547          void GenericApp_SendTheMessage( void )
   \                     GenericApp_SendTheMessage:
    548          {
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 12
   \   000005   74F4         MOV     A,#-0xc
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    549            afAddrType_t P2P_DstAddr;
    550            P2P_DstAddr.addrMode = (afAddrMode_t)Addr16Bit;
   \   00000A   7408         MOV     A,#0x8
   \   00000C   12....       LCALL   ?XSTACK_DISP0_8
   \   00000F   7402         MOV     A,#0x2
   \   000011   F0           MOVX    @DPTR,A
    551            P2P_DstAddr.endPoint = GENERICAPP_ENDPOINT;
   \   000012   7409         MOV     A,#0x9
   \   000014   12....       LCALL   ?XSTACK_DISP0_8
   \   000017   740A         MOV     A,#0xa
   \   000019   12....       LCALL   ?Subroutine4 & 0xFFFF
    552            P2P_DstAddr.addr.shortAddr = 0xFFFF; //ÖÕ¶Ë¶ÌµØÖ·ÔÚLCDÉÏÓĞÏÔÊ¾£¬´Ë´¦»»³ÉÖÕ¶Ë¶ÌµØÖ·¾Í¿ÉÒÔµã²¥ÁË¡£
    553            
    554            if ( AF_DataRequest( &P2P_DstAddr, &GenericApp_epDesc,
    555                                 GENERICAPP_CLUSTERID,
    556                                 1,
    557                                 recData,
    558                                 &GenericApp_TransID,
    559                                 AF_DISCV_ROUTE, AF_DEFAULT_RADIUS ) == afStatus_SUCCESS )
   \                     ??CrossCallReturnLabel_1:
   \   00001C                ; Setup parameters for call to function AF_DataRequest
   \   00001C   75..1E       MOV     ?V0 + 0,#0x1e
   \   00001F   78..         MOV     R0,#?V0 + 0
   \   000021   12....       LCALL   ?PUSH_XSTACK_I_ONE
   \   000024   75....       MOV     ?V0 + 0,#GenericApp_TransID & 0xff
   \   000027   75....       MOV     ?V0 + 1,#(GenericApp_TransID >> 8) & 0xff
   \   00002A   78..         MOV     R0,#?V0 + 0
   \   00002C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00002F   75....       MOV     ?V0 + 0,#recData & 0xff
   \   000032   75....       MOV     ?V0 + 1,#(recData >> 8) & 0xff
   \   000035   78..         MOV     R0,#?V0 + 0
   \   000037   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003A   75..01       MOV     ?V0 + 0,#0x1
   \   00003D   75..00       MOV     ?V0 + 1,#0x0
   \   000040   78..         MOV     R0,#?V0 + 0
   \   000042   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000045   78..         MOV     R0,#?V0 + 0
   \   000047   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00004A   7920         MOV     R1,#0x20
   \   00004C   7C..         MOV     R4,#GenericApp_epDesc & 0xff
   \   00004E   7D..         MOV     R5,#(GenericApp_epDesc >> 8) & 0xff
   \   000050   7409         MOV     A,#0x9
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   AA82         MOV     R2,DPL
   \   000057   AB83         MOV     R3,DPH
   \   000059   12....       LCALL   ??AF_DataRequest?relay
   \   00005C   7409         MOV     A,#0x9
   \   00005E   12....       LCALL   ?DEALLOC_XSTACK8
    560            {
    561              // Successfully requested to be sent.
    562            }
    563            else
    564            {
    565              // Error occurred in request to send.
    566            }
    567          }
   \   000061   740C         MOV     A,#0xc
   \   000063   12....       LCALL   ?DEALLOC_XSTACK8
   \   000066   02....       LJMP    ?Subroutine2 & 0xFFFF
    568          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    569          static void rxCB(uint8 port,uint8 event)
   \                     rxCB:
    570          {   
   \   000000   74F4         MOV     A,#-0xc
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 12
   \   000005                ; Auto size: 0
   \   000005   8A..         MOV     ?V0 + 0,R2
    571            if ((event & (HAL_UART_RX_FULL | HAL_UART_RX_ABOUT_FULL | HAL_UART_RX_TIMEOUT)) &&
    572          #if SERIAL_APP_LOOPBACK
    573                (SerialApp_TxLen < SERIAL_APP_TX_MAX))
    574          #else
    575                !SerialApp_TxLen)
   \   000007   7407         MOV     A,#0x7
   \   000009   55..         ANL     A,?V0 + 0
   \   00000B   7003         JNZ     $+5
   \   00000D   02....       LJMP    ??rxCB_0 & 0xFFFF
   \   000010   90....       MOV     DPTR,#SerialApp_TxLen
   \   000013   E0           MOVX    A,@DPTR
   \   000014   6003         JZ      $+5
   \   000016   02....       LJMP    ??rxCB_0 & 0xFFFF
    576          #endif
    577            { 
    578              uint16 len = Hal_UART_RxBufLen(HAL_UART_PORT_0);
    579              SerialApp_TxLen = HalUARTRead(HAL_UART_PORT_0, RxBuf,len);
   \   000019                ; Setup parameters for call to function HalUARTRead
   \   000019                ; Setup parameters for call to function Hal_UART_RxBufLen
   \   000019   7900         MOV     R1,#0x0
   \   00001B   12....       LCALL   ??Hal_UART_RxBufLen?relay
   \   00001E   EA           MOV     A,R2
   \   00001F   FC           MOV     R4,A
   \   000020   EB           MOV     A,R3
   \   000021   FD           MOV     R5,A
   \   000022   7A..         MOV     R2,#RxBuf & 0xff
   \   000024   7B..         MOV     R3,#(RxBuf >> 8) & 0xff
   \   000026   7900         MOV     R1,#0x0
   \   000028   12....       LCALL   ??HalUARTRead?relay
   \   00002B   EA           MOV     A,R2
   \   00002C   90....       MOV     DPTR,#SerialApp_TxLen
   \   00002F   F0           MOVX    @DPTR,A
    580                if ( strstr(RxBuf, "CWMODE=1") != NULL&&strstr(RxBuf, "OK") != NULL )
                                   ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

        if ( strstr(RxBuf, "CWMODE=1") != NULL&&strstr(RxBuf, "OK") != NULL )
                                                       ^
"F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",580  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \   000030                ; Setup parameters for call to function strstr
   \   000030   7C..         MOV     R4,#`?<Constant "CWMODE=1">` & 0xff
   \   000032   7D..         MOV     R5,#(`?<Constant "CWMODE=1">` >> 8) & 0xff
   \   000034   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   000037   6010         JZ      ??rxCB_1
   \   000039                ; Setup parameters for call to function strstr
   \   000039   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_5:
   \   00003C   600B         JZ      ??rxCB_1
    581                    {
    582                        HalUARTWrite(HAL_UART_PORT_0,"AT+CWJAP=\"MI 6\",\"123456789q\"\r\n", strlen("AT+CWJAP=\"MI 6\",\"123456789q\"\r\n"));
   \   00003E                ; Setup parameters for call to function HalUARTWrite
   \   00003E   7C1E         MOV     R4,#0x1e
   \   000040   7D00         MOV     R5,#0x0
   \   000042   7A..         MOV     R2,#`?<Constant "AT+CWJAP=\\"MI 6\\",\\"1234...">` & 0xff
   \   000044   7B..         MOV     R3,#(`?<Constant "AT+CWJAP=\\"MI 6\\",\\"1234...">` >> 8) & 0xff
   \   000046   02....       LJMP    ??rxCB_2 & 0xFFFF
    583                    }
    584                else if ( strstr(RxBuf, "IFI GOT IP") != NULL )
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \                     ??rxCB_1:
   \   000049                ; Setup parameters for call to function strstr
   \   000049   7C..         MOV     R4,#`?<Constant "IFI GOT IP">` & 0xff
   \   00004B   7D..         MOV     R5,#(`?<Constant "IFI GOT IP">` >> 8) & 0xff
   \   00004D   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000050   600B         JZ      ??rxCB_3
    585                    {
    586                        HalUARTWrite(HAL_UART_PORT_0, "AT+CIPMUX=1\r\n", strlen("AT+CIPMUX=1\r\n"));
   \   000052                ; Setup parameters for call to function HalUARTWrite
   \   000052   7C0D         MOV     R4,#0xd
   \   000054   7D00         MOV     R5,#0x0
   \   000056   7A..         MOV     R2,#`?<Constant "AT+CIPMUX=1\\r\\n">` & 0xff
   \   000058   7B..         MOV     R3,#(`?<Constant "AT+CIPMUX=1\\r\\n">` >> 8) & 0xff
   \   00005A   02....       LJMP    ??rxCB_2 & 0xFFFF
    587                       
    588                    }
    589                else if (strstr(RxBuf, "AT+CIPMUX=1") != NULL  && strstr(RxBuf, "OK") != NULL )
                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

        else if (strstr(RxBuf, "AT+CIPMUX=1") != NULL  && strstr(RxBuf, "OK") != NULL )
                                                                 ^
"F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",589  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??rxCB_3:
   \   00005D                ; Setup parameters for call to function strstr
   \   00005D   7C..         MOV     R4,#`?<Constant "AT+CIPMUX=1">` & 0xff
   \   00005F   7D..         MOV     R5,#(`?<Constant "AT+CIPMUX=1">` >> 8) & 0xff
   \   000061   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   000064   6010         JZ      ??rxCB_4
   \   000066                ; Setup parameters for call to function strstr
   \   000066   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_6:
   \   000069   600B         JZ      ??rxCB_4
    590                    {
    591          
    592                        HalUARTWrite(HAL_UART_PORT_0,"AT+CIPSERVER=1,8800\r\n", strlen("AT+CIPSERVER=1,8800\r\n"));
   \   00006B                ; Setup parameters for call to function HalUARTWrite
   \   00006B   7C15         MOV     R4,#0x15
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   7A..         MOV     R2,#`?<Constant "AT+CIPSERVER=1,8800\\r\\n">` & 0xff
   \   000071   7B..         MOV     R3,#(`?<Constant "AT+CIPSERVER=1,8800\\r\\n">` >> 8) & 0xff
   \   000073   02....       LJMP    ??rxCB_2 & 0xFFFF
    593                     
    594                    }
    595                else if ( strstr(RxBuf, "AT+CIPSERVER=1,8800") != NULL  && strstr(RxBuf, "OK") != NULL  )  
                                        ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

        else if ( strstr(RxBuf, "AT+CIPSERVER=1,8800") != NULL  && strstr(RxBuf, "OK") != NULL  )  
                                                                          ^
"F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",595  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??rxCB_4:
   \   000076                ; Setup parameters for call to function strstr
   \   000076   7C..         MOV     R4,#`?<Constant "AT+CIPSERVER=1,8800">` & 0xff
   \   000078   7D..         MOV     R5,#(`?<Constant "AT+CIPSERVER=1,8800">` >> 8) & 0xff
   \   00007A   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_13:
   \   00007D   6010         JZ      ??rxCB_5
   \   00007F                ; Setup parameters for call to function strstr
   \   00007F   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000082   600B         JZ      ??rxCB_5
    596                    {
    597                     
    598                        HalUARTWrite(HAL_UART_PORT_0, "AT+CIPSTART=0,\"TCP\",\"206.253.164.235\",10086\r\n", strlen("AT+CIPSTART=0,\"TCP\",\"206.253.164.235\",10086\r\n"));
   \   000084                ; Setup parameters for call to function HalUARTWrite
   \   000084   7C2D         MOV     R4,#0x2d
   \   000086   7D00         MOV     R5,#0x0
   \   000088   7A..         MOV     R2,#`?<Constant "AT+CIPSTART=0,\\"TCP\\",\\"...">` & 0xff
   \   00008A   7B..         MOV     R3,#(`?<Constant "AT+CIPSTART=0,\\"TCP\\",\\"...">` >> 8) & 0xff
   \   00008C   02....       LJMP    ??rxCB_2 & 0xFFFF
    599                    
    600                    }
    601                else if (strstr(RxBuf, "ONNECT") != NULL  && strstr(RxBuf, "OK") != NULL )
                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

        else if (strstr(RxBuf, "ONNECT") != NULL  && strstr(RxBuf, "OK") != NULL )
                                                            ^
"F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",601  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??rxCB_5:
   \   00008F                ; Setup parameters for call to function strstr
   \   00008F   7C..         MOV     R4,#`?<Constant "ONNECT">` & 0xff
   \   000091   7D..         MOV     R5,#(`?<Constant "ONNECT">` >> 8) & 0xff
   \   000093   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   000096   600F         JZ      ??rxCB_6
   \   000098                ; Setup parameters for call to function strstr
   \   000098   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00009B   600A         JZ      ??rxCB_6
    602                    {
    603                     
    604                         HalUARTWrite(HAL_UART_PORT_0, "AT+CIPSEND=0,9\r\n", strlen("AT+CIPSEND=0,9\r\n"));
   \   00009D                ; Setup parameters for call to function HalUARTWrite
   \   00009D   7C10         MOV     R4,#0x10
   \   00009F   7D00         MOV     R5,#0x0
   \   0000A1   7A..         MOV     R2,#`?<Constant "AT+CIPSEND=0,9\\r\\n">` & 0xff
   \   0000A3   7B..         MOV     R3,#(`?<Constant "AT+CIPSEND=0,9\\r\\n">` >> 8) & 0xff
   \   0000A5   8077         SJMP    ??rxCB_2
    605                    }
    606                else if (strstr(RxBuf, "CIPSEND=0,9") != NULL  && strstr(RxBuf, "OK") != NULL )
                                       ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"

        else if (strstr(RxBuf, "CIPSEND=0,9") != NULL  && strstr(RxBuf, "OK") != NULL )
                                                                 ^
"F:\Zigbee×ÊÁÏ(2018È«ĞÂÉı¼¶°æ)\4.ZstackĞ­ÒéÕ»×éÍøÊµÀı\15¡¢»ùÓÚGenericApp´®¿ÚÎŞÏß¿ØÖÆLEDµÆ\Projects\zstack\Samples\GenericApp\Source\GenericApp.c",606  Warning[Pe167]: 
          argument of type "unsigned char *" is incompatible with parameter of
          type "char const *"
   \                     ??rxCB_6:
   \   0000A7                ; Setup parameters for call to function strstr
   \   0000A7   7C..         MOV     R4,#`?<Constant "CIPSEND=0,9">` & 0xff
   \   0000A9   7D..         MOV     R5,#(`?<Constant "CIPSEND=0,9">` >> 8) & 0xff
   \   0000AB   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   0000AE   600F         JZ      ??rxCB_7
   \   0000B0                ; Setup parameters for call to function strstr
   \   0000B0   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000B3   600A         JZ      ??rxCB_7
    607                     {
    608                        HalUARTWrite(HAL_UART_PORT_0, "CONN_9527\r\n", strlen("CONN_9527\r\n"));   
   \   0000B5                ; Setup parameters for call to function HalUARTWrite
   \   0000B5   7C0B         MOV     R4,#0xb
   \   0000B7   7D00         MOV     R5,#0x0
   \   0000B9   7A..         MOV     R2,#`?<Constant "CONN_9527\\r\\n">` & 0xff
   \   0000BB   7B..         MOV     R3,#(`?<Constant "CONN_9527\\r\\n">` >> 8) & 0xff
   \   0000BD   805F         SJMP    ??rxCB_2
    609                    }
    610                else if(strstr(RxBuf, "IPD,0,") != NULL)
                                      ^
Warning[Pe167]: argument of type "unsigned char *" is incompatible with
          parameter of type "char const *"
   \                     ??rxCB_7:
   \   0000BF                ; Setup parameters for call to function strstr
   \   0000BF   7C..         MOV     R4,#`?<Constant "IPD,0,">` & 0xff
   \   0000C1   7D..         MOV     R5,#(`?<Constant "IPD,0,">` >> 8) & 0xff
   \   0000C3   12....       LCALL   ??Subroutine6_0 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   0000C6   605B         JZ      ??rxCB_8
    611                { 
    612                  
    613                  if(RxBuf[11]== 0x01 && RxBuf[12] == 0x00 && RxBuf[13] == 0x00){
   \   0000C8   90....       MOV     DPTR,#RxBuf + 11
   \   0000CB   E0           MOVX    A,@DPTR
   \   0000CC   F8           MOV     R0,A
   \   0000CD   7401         MOV     A,#0x1
   \   0000CF   68           XRL     A,R0
   \   0000D0   701C         JNZ     ??rxCB_9
   \   0000D2   A3           INC     DPTR
   \   0000D3   E0           MOVX    A,@DPTR
   \   0000D4   704D         JNZ     ??rxCB_8
   \   0000D6   A3           INC     DPTR
   \   0000D7   E0           MOVX    A,@DPTR
   \   0000D8   7049         JNZ     ??rxCB_8
    614                    HalUARTWrite(HAL_UART_PORT_0,&RxBuf[11], 1);
   \   0000DA                ; Setup parameters for call to function HalUARTWrite
   \   0000DA   7C01         MOV     R4,#0x1
   \   0000DC   7D00         MOV     R5,#0x0
   \   0000DE   7A..         MOV     R2,#(RxBuf + 11) & 0xff
   \   0000E0   7B..         MOV     R3,#((RxBuf + 11) >> 8) & 0xff
   \   0000E2   7900         MOV     R1,#0x0
   \   0000E4   12....       LCALL   ??HalUARTWrite?relay
    615                    recData[0]= 0x10;
   \   0000E7   90....       MOV     DPTR,#recData
   \   0000EA   7410         MOV     A,#0x10
   \   0000EC   8024         SJMP    ??rxCB_10
    616                    GenericApp_SendTheMessage();
    617                    HalUARTWrite(HAL_UART_PORT_0,&recData[0], 1);
    618                  }
    619                  else if (RxBuf[11] == 0x00 && RxBuf[12] == 0x01 && RxBuf[13] == 0x00){
   \                     ??rxCB_9:
   \   0000EE   E8           MOV     A,R0
   \   0000EF   7032         JNZ     ??rxCB_8
   \   0000F1   A3           INC     DPTR
   \   0000F2   E0           MOVX    A,@DPTR
   \   0000F3   F8           MOV     R0,A
   \   0000F4   7401         MOV     A,#0x1
   \   0000F6   68           XRL     A,R0
   \   0000F7   700B         JNZ     ??rxCB_11
   \   0000F9   A3           INC     DPTR
   \   0000FA   E0           MOVX    A,@DPTR
   \   0000FB   7026         JNZ     ??rxCB_8
    620                    recData[0] = 0x20;
   \   0000FD   90....       MOV     DPTR,#recData
   \   000100   7420         MOV     A,#0x20
   \   000102   800E         SJMP    ??rxCB_10
    621                    GenericApp_SendTheMessage();
    622                    HalUARTWrite(HAL_UART_PORT_0,recData, 1);
    623                  }
   \                     ??rxCB_11:
   \   000104   E8           MOV     A,R0
   \   000105   701C         JNZ     ??rxCB_8
   \   000107   A3           INC     DPTR
   \   000108   E0           MOVX    A,@DPTR
   \   000109   6401         XRL     A,#0x1
   \   00010B   7016         JNZ     ??rxCB_8
    624                  else if (RxBuf[11] == 0x00 && RxBuf[12] == 0x00 && RxBuf[13] == 0x01){
    625                    *recData = 0x30;
   \   00010D   90....       MOV     DPTR,#recData
   \   000110   7430         MOV     A,#0x30
   \                     ??rxCB_10:
   \   000112   F0           MOVX    @DPTR,A
    626                    GenericApp_SendTheMessage();
   \   000113                ; Setup parameters for call to function GenericApp_SendTheMessage
   \   000113   12....       LCALL   ??GenericApp_SendTheMessage?relay
    627                    HalUARTWrite(HAL_UART_PORT_0,recData, 1);
   \   000116                ; Setup parameters for call to function HalUARTWrite
   \   000116   7C01         MOV     R4,#0x1
   \   000118   7D00         MOV     R5,#0x0
   \   00011A   7A..         MOV     R2,#recData & 0xff
   \   00011C   7B..         MOV     R3,#(recData >> 8) & 0xff
   \                     ??rxCB_2:
   \   00011E   7900         MOV     R1,#0x0
   \   000120   12....       LCALL   ??HalUARTWrite?relay
    628                  }
    629                }
    630                SerialApp_TxLen=0;
   \                     ??rxCB_8:
   \   000123   90....       MOV     DPTR,#SerialApp_TxLen
   \   000126   E4           CLR     A
   \   000127   F0           MOVX    @DPTR,A
    631              }
    632            }
   \                     ??rxCB_0:
   \   000128   02....       LJMP    ?Subroutine1 & 0xFFFF

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   7C..         MOV     R4,#`?<Constant "OK">` & 0xff
   \   000002   7D..         MOV     R5,#(`?<Constant "OK">` >> 8) & 0xff
   \   000004                REQUIRE ??Subroutine6_0
   \   000004                ; // Fall through to label ??Subroutine6_0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ??Subroutine6_0:
   \   000000   7A..         MOV     R2,#RxBuf & 0xff
   \   000002   7B..         MOV     R3,#(RxBuf >> 8) & 0xff
   \   000004   12....       LCALL   ??strstr?relay
   \   000007   8B..         MOV     ?V0 + 3,R3
   \   000009   EA           MOV     A,R2
   \   00000A   45..         ORL     A,?V0 + 3
   \   00000C   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_Init?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessEvent?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessEvent

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_ProcessZDOMsgs?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_ProcessZDOMsgs

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_HandleKeys?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_HandleKeys

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??Delay_ustt?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    Delay_ustt

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_MessageMSGCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_MessageMSGCB

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??GenericApp_SendTheMessage?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    GenericApp_SendTheMessage

   \                                 In  segment BANK_RELAYS, align 1
   \                     ??rxCB?relay:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    rxCB

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "UartIni04 RR\\r\\n">`:
   \   000000   55617274     DB "UartIni04 RR\015\012"
   \            496E6930
   \            34205252
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWMODE=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CWMODE=1\015\012"
   \            574D4F44
   \            453D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CWMODE=1">`:
   \   000000   43574D4F     DB "CWMODE=1"
   \            44453D31
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "OK">`:
   \   000000   4F4B00       DB "OK"

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CWJAP=\\"MI 6\\",\\"1234...">`:
   \   000000   41542B43     DB "AT+CWJAP=\"MI 6\",\"123456789q\"\015\012"
   \            574A4150
   \            3D224D49
   \            2036222C
   \            22313233
   \            34353637
   \            38397122
   \            0D0A00  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IFI GOT IP">`:
   \   000000   49464920     DB "IFI GOT IP"
   \            474F5420
   \            495000  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPMUX=1\015\012"
   \            49504D55
   \            583D310D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPMUX=1">`:
   \   000000   41542B43     DB "AT+CIPMUX=1"
   \            49504D55
   \            583D3100

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8800\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8800\015\012"
   \            49505345
   \            52564552
   \            3D312C38
   \            3830300D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSERVER=1,8800">`:
   \   000000   41542B43     DB "AT+CIPSERVER=1,8800"
   \            49505345
   \            52564552
   \            3D312C38
   \            38303000

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSTART=0,\\"TCP\\",\\"...">`:
   \   000000   41542B43     DB "AT+CIPSTART=0,\"TCP\",\"206.253.164.235\",10086\015\012"
   \            49505354
   \            4152543D
   \            302C2254
   \            4350222C
   \            22323036
   \            2E323533
   \            2E313634
   \            2E323335
   \            222C3130
   \            3038360D
   \            0A00    

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "ONNECT">`:
   \   000000   4F4E4E45     DB "ONNECT"
   \            435400  

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "AT+CIPSEND=0,9\\r\\n">`:
   \   000000   41542B43     DB "AT+CIPSEND=0,9\015\012"
   \            49505345
   \            4E443D30
   \            2C390D0A
   \            00      

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CIPSEND=0,9">`:
   \   000000   43495053     DB "CIPSEND=0,9"
   \            454E443D
   \            302C3900

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "CONN_9527\\r\\n">`:
   \   000000   434F4E4E     DB "CONN_9527\015\012"
   \            5F393532
   \            370D0A00

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant "IPD,0,">`:
   \   000000   4950442C     DB "IPD,0,"
   \            302C00  
    633          
    634          
    635          
    636          /*********************************************************************
    637          *********************************************************************/

   Maximum stack usage in bytes:

     Function                       ISTACK PSTACK XSTACK
     --------                       ------ ------ ------
     Delay_ustt                         0      0     47
       -> Onboard_wait                  0      0     18
     GenericApp_HandleKeys              0      0     42
       -> HalLedSet                     0      0     42
       -> NLME_GetShortAddr             0      0     42
       -> ZDP_EndDeviceBindReq          0      0     60
       -> HalLedSet                     0      0     42
       -> ZDP_MatchDescReq              0      0     58
     GenericApp_Init                    0      0     38
       -> afRegister                    0      0     76
       -> RegisterForKeys               0      0     76
       -> HalUARTOpen                   0      0     76
       -> HalUARTWrite                  0      0     76
       -> Delay_ustt                    0      0     76
       -> HalUARTWrite                  0      0     76
     GenericApp_MessageMSGCB            0      0      0
     GenericApp_ProcessEvent            0      0     12
       -> osal_msg_receive              0      0     24
       -> osal_msg_deallocate           0      0     24
       -> osal_msg_receive              0      0     24
       -> GenericApp_ProcessZDOMsgs     0      0     24
       -> GenericApp_HandleKeys         0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> osal_start_timerEx            0      0     24
     GenericApp_ProcessZDOMsgs          0      0     22
       -> HalLedSet                     0      0     20
       -> HalLedSet                     0      0     20
       -> ZDO_ParseEPListRsp            0      0     20
       -> HalLedSet                     0      0     20
       -> osal_mem_free                 0      0     20
     GenericApp_SendTheMessage          0      0     43
       -> AF_DataRequest                0      0     62
     rxCB                               0      0     12
       -> Hal_UART_RxBufLen             0      0     24
       -> HalUARTRead                   0      0     24
       -> strstr                        0      0     24
       -> strstr                        0      0     24
       -> HalUARTWrite                  0      0     24
       -> strstr                        0      0     24
       -> HalUARTWrite                  0      0     24
       -> strstr                        0      0     24
       -> strstr                        0      0     24
       -> HalUARTWrite                  0      0     24
       -> strstr                        0      0     24
       -> strstr                        0      0     24
       -> HalUARTWrite                  0      0     24
       -> strstr                        0      0     24
       -> strstr                        0      0     24
       -> HalUARTWrite                  0      0     24
       -> strstr                        0      0     24
       -> strstr                        0      0     24
       -> HalUARTWrite                  0      0     24
       -> strstr                        0      0     24
       -> HalUARTWrite                  0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> HalUARTWrite                  0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> HalUARTWrite                  0      0     24
       -> GenericApp_SendTheMessage     0      0     24
       -> HalUARTWrite                  0      0     24


   Segment part sizes:

     Function/Label                            Bytes
     --------------                            -----
     GenericApp_ClusterList                       2
     GenericApp_SimpleDesc                       12
     GenericApp_epDesc                            6
     GenericApp_TaskID                            1
     GenericApp_NwkState                          1
     GenericApp_TransID                           1
     GenericApp_DstAddr                          12
     RxBuf                                      101
     recData                                      1
     SerialApp_TxLen                              1
     httpCon1                                     2
     httpsend                                     2
     GenericApp_Init                            208
     ?Subroutine0                                 5
     ?Subroutine5                                 8
     GenericApp_ProcessEvent                    139
     ?Subroutine1                                 5
     GenericApp_ProcessZDOMsgs                  154
     ?Subroutine2                                 5
     GenericApp_HandleKeys                      217
     ?Subroutine4                                 9
     Delay_ustt                                  27
     GenericApp_MessageMSGCB                      3
     GenericApp_SendTheMessage                  105
     rxCB                                       299
     ?Subroutine3                                 4
     ??Subroutine6_0                             13
     ??GenericApp_Init?relay                      6
     ??GenericApp_ProcessEvent?relay              6
     ??GenericApp_ProcessZDOMsgs?relay            6
     ??GenericApp_HandleKeys?relay                6
     ??Delay_ustt?relay                           6
     ??GenericApp_MessageMSGCB?relay              6
     ??GenericApp_SendTheMessage?relay            6
     ??rxCB?relay                                 6
     ?<Constant "UartIni04 RR\r\n">              15
     ?<Constant "AT+CWMODE=1\r\n">               14
     ?<Constant "CWMODE=1">                       9
     ?<Constant "OK">                             3
     ?<Constant "AT+CWJAP=\"MI 6\",\"1234...">   31
     ?<Constant "IFI GOT IP">                    11
     ?<Constant "AT+CIPMUX=1\r\n">               14
     ?<Constant "AT+CIPMUX=1">                   12
     ?<Constant "AT+CIPSERVER=1,8800\r\n">       22
     ?<Constant "AT+CIPSERVER=1,8800">           20
     ?<Constant "AT+CIPSTART=0,\"TCP\",\"...">   46
     ?<Constant "ONNECT">                         7
     ?<Constant "AT+CIPSEND=0,9\r\n">            17
     ?<Constant "CIPSEND=0,9">                   12
     ?<Constant "CONN_9527\r\n">                 12
     ?<Constant "IPD,0,">                         7

 
 1 201 bytes in segment BANKED_CODE
    48 bytes in segment BANK_RELAYS
   266 bytes in segment XDATA_ROM_C
   128 bytes in segment XDATA_Z
 
 1 249 bytes of CODE  memory
   266 bytes of CONST memory
   128 bytes of XDATA memory

Errors: none
Warnings: 14
